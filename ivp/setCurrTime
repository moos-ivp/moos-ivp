./src/uFunctionVis/FV_GUI.h:40:    {m_model = g_model; m_fv_view[01;31m[Ker-[m[K>setModel(g_model);}
./src/uTimerScript/TS_MOOSApp.h:110:  double        m_reset_time;  // -1:none, 0:aft[01;31m[Ker-[m[Klast, NUM:atNUM
./src/lib_behaviors-marine/BHV_StationKeep.h:95:  // when activate under "cent[01;31m[Ker-[m[Kactive" style.
./src/lib_zaicview/ZAIC_GUI.h:44:  void setVerbose(bool v)        {m_zaic_view[01;31m[Ker-[m[K>setVerbose(v);}
./src/app_ffview/FFV_GUI.h:41:    {m_ffv_view[01;31m[Ker-[m[K>setAOF(aof);}
./src/uFunctionVis/FV_GUI.cpp:74:  m_fld_curr_it[01;31m[Ker-[m[K>clear_visible_focus();
./src/uFunctionVis/FV_GUI.cpp:106:  m_fv_view[01;31m[Ker-[m[K>resize(0, 30, w(), h()-60);
./src/uFunctionVis/FV_GUI.cpp:125:  m_fld_curr_it[01;31m[Ker-[m[K>resize(iter_x, iter_y, iter_wid, field_hgt);
./src/uFunctionVis/FV_GUI.cpp:172:  m_fld_curr_it[01;31m[Ker-[m[K>textsize(info_size); 
./src/uFunctionVis/FV_GUI.cpp:173:  m_fld_curr_it[01;31m[Ker-[m[K>labelsize(info_size);
./src/uFunctionVis/FV_GUI.cpp:263://            between sub-widgets. We ov[01;31m[Ker-[m[Kride that here to do the 
./src/uFunctionVis/FV_GUI.cpp:330:    m_fv_view[01;31m[Ker-[m[K>setParam("mod_radius", 1.05);
./src/uFunctionVis/FV_GUI.cpp:332:    m_fv_view[01;31m[Ker-[m[K>setParam("mod_radius", 0.95);
./src/uFunctionVis/FV_GUI.cpp:343:    m_fld_curr_it[01;31m[Ker-[m[K>color(fcolor);
./src/uFunctionVis/FV_GUI.cpp:347:    m_fld_curr_it[01;31m[Ker-[m[K>color(fcolor);
./src/uFunctionVis/FV_GUI.cpp:357:  m_fv_view[01;31m[Ker-[m[K>setParam("reset_view", "2");
./src/uFunctionVis/FV_GUI.cpp:365:  m_fv_view[01;31m[Ker-[m[K>setParam("draw_pin", "toggle");
./src/uFunctionVis/FV_GUI.cpp:409:  m_fld_curr_it[01;31m[Ker-[m[K>value(iteration.c_str());
./src/uFunctionVis/FV_GUI.cpp:411:  m_fv_view[01;31m[Ker-[m[K>redraw();
./src/uFunctionVis/FV_MOOSApp.cpp:137:      m_view[01;31m[Ker-[m[K>resetQuadSet();
./src/uFunctionVis/FV_MOOSApp.cpp:138:      m_view[01;31m[Ker-[m[K>redraw();
./src/uSimMarineV23/USM_Model.cpp:907:  // Pass the us[01;31m[Ker-[m[Kconfigured TSM to the SimEngine
./src/uSimMarineV22/USM_Model.cpp:898:  // Pass the us[01;31m[Ker-[m[Kconfigured TSM to the SimEngine
./src/app_zaic_vect/ZAIC_VECT_GUI.cpp:48:  m_zaic_view[01;31m[Ker-[m[K>setModel(m_zaic_model);
./src/app_zaic_vect/ZAIC_VECT_GUI.cpp:127:    m_zaic_view[01;31m[Ker-[m[K>setVerbose(verbose);
./src/app_zaic_vect/ZAIC_VECT_GUI.cpp:132:  m_zaic_view[01;31m[Ker-[m[K>redraw();
./src/app_zaic_vect/ZAIC_VECT_GUI.cpp:178:  str = uintToString(m_zaic_view[01;31m[Ker-[m[K>getTotalPieces());
./src/lib_helmivp/ModeSet.cpp:48:  // Collect results initially into a map. Mappings may be ov[01;31m[Ker-[m[Kwritten
./src/lib_helmivp/ModeSet.cpp:235:    string s_result = m_info_buff[01;31m[Ker-[m[K>sQuery(varname, ok_s);
./src/lib_helmivp/ModeSet.cpp:236:    double d_result = m_info_buff[01;31m[Ker-[m[K>dQuery(varname, ok_d);
./src/lib_helmivp/ModeSet.cpp:263:      m_info_buff[01;31m[Ker-[m[K>setValue(varname, varvalue);
./src/lib_helmivp/ModeSet.cpp:267:      m_info_buff[01;31m[Ker-[m[K>setValue(varname, varvalue);
./src/lib_helmivp/BehaviorSpec.cpp:106:  vector<string> svector = m_info_buff[01;31m[Ker-[m[K>sQueryDeltas(m_updates_var, ok);
./src/app_alogtest/LogTest.cpp:478:    string s_result = m_info_buff[01;31m[Ker-[m[K>sQuery(varname, ok_s);
./src/app_alogtest/LogTest.cpp:479:    double d_result = m_info_buff[01;31m[Ker-[m[K>dQuery(varname, ok_d);
./src/app_alogtest/LogTest.cpp:551:    m_info_buff[01;31m[Ker-[m[K>setValue("ALOG_TIMESTAMP", ctime);
./src/app_alogtest/LogTest.cpp:552:    m_info_buff[01;31m[Ker-[m[K>setCurrTime(ctime);
./src/app_alogtest/LogTest.cpp:558:	return(m_info_buff[01;31m[Ker-[m[K>setValue(name, ddata));
./src/app_alogtest/LogTest.cpp:560:	return(m_info_buff[01;31m[Ker-[m[K>setValue(name, sdata));
./src/uFldCollisionDetect/CollisionDetector.cpp:558:    string s_result = m_info_buff[01;31m[Ker-[m[K>sQuery(varname, ok_s);
./src/uFldCollisionDetect/CollisionDetector.cpp:559:    double d_result = m_info_buff[01;31m[Ker-[m[K>dQuery(varname, ok_d);
./src/uFldCollisionDetect/CollisionDetector.cpp:593:    return(m_info_buff[01;31m[Ker-[m[K>setValue(key, ddata));
./src/uFldCollisionDetect/CollisionDetector.cpp:595:    return(m_info_buff[01;31m[Ker-[m[K>setValue(key, sdata));
./src/lib_behaviors-colregs/AOF_R17.cpp:159:  // (c) A pow[01;31m[Ker-[m[Kdriven vessel which takes action in a crossing
./src/lib_behaviors-colregs/AOF_R17.cpp:161:  // with another pow[01;31m[Ker-[m[Kdriven vessel shall, if the circumstances of
./src/lib_behaviors-colregs/AOF_R17.cpp:230:  //  17(c) A pow[01;31m[Ker-[m[Kdriven vessel which takes action in a crossing
./src/lib_behaviors-colregs/AOF_R17.cpp:232:  //  with another pow[01;31m[Ker-[m[Kdriven vessel shall, if the circumstances of
./src/uFldNodeComms/FldNodeComms.cpp:514://     Notes: Int[01;31m[Ker-[m[Kvehicle node reports must pass certain criteria
./src/uFldNodeComms/FldNodeComms.cpp:515://            based on int[01;31m[Ker-[m[Kvehicle range, group, and the respective
./src/uFldNodeComms/FldNodeComms.cpp:652://     Notes: Int[01;31m[Ker-[m[Kvehicle node reports must pass certain criteria
./src/uFldNodeComms/FldNodeComms.cpp:653://            based on int[01;31m[Ker-[m[Kvehicle range, group, and the respective
./src/dep_pBasicContactMgr/BasicContactMgr_Info.cpp:43:  blk("  configured to post alerts with us[01;31m[Ker-[m[Kconfigured content about  ");
./src/uFldContactRangeSensor/CRS_Info_HP.cpp:43:  blk("  or may not be answered dependent on int[01;31m[Ker-[m[Kvehicle range.      ");
./src/app_geoview/GEO_GUI.cpp:124://            between sub-widgets. We ov[01;31m[Ker-[m[Kride that here to do the 
./src/app_geoview/GEO_GUI.cpp:144:  pview[01;31m[Ker-[m[K>setParam("clear", "polygons");
./src/app_geoview/GEO_GUI.cpp:146:  pview[01;31m[Ker-[m[K>redraw();
./src/app_geoview/GEO_GUI.cpp:154:  pview[01;31m[Ker-[m[K>clearActivePoly();
./src/app_geoview/GEO_GUI.cpp:156:  pview[01;31m[Ker-[m[K>redraw();
./src/app_geoview/GEO_GUI.cpp:164:  pview[01;31m[Ker-[m[K>createNew();
./src/app_geoview/GEO_GUI.cpp:166:  pview[01;31m[Ker-[m[K>redraw();
./src/app_geoview/GEO_GUI.cpp:174:  pview[01;31m[Ker-[m[K>adjustActive(v);
./src/app_geoview/GEO_GUI.cpp:176:  pview[01;31m[Ker-[m[K>redraw();
./src/app_geoview/GEO_GUI.cpp:184:  pview[01;31m[Ker-[m[K>setParam("mode", v);
./src/app_geoview/GEO_GUI.cpp:186:  pview[01;31m[Ker-[m[K>redraw();
./src/app_geoview/GEO_GUI.cpp:194:  pview[01;31m[Ker-[m[K>rotatePoly(v);
./src/app_geoview/GEO_GUI.cpp:196:  pview[01;31m[Ker-[m[K>redraw();
./src/app_geoview/GEO_GUI.cpp:204:  pview[01;31m[Ker-[m[K>shiftHorzPoly((float)(amt));
./src/app_geoview/GEO_GUI.cpp:206:  pview[01;31m[Ker-[m[K>redraw();
./src/app_geoview/GEO_GUI.cpp:214:  pview[01;31m[Ker-[m[K>shiftVertPoly((float)(amt));
./src/app_geoview/GEO_GUI.cpp:216:  pview[01;31m[Ker-[m[K>redraw();
./src/app_geoview/GEO_GUI.cpp:224:  pview[01;31m[Ker-[m[K>growPoly(v);
./src/app_geoview/GEO_GUI.cpp:226:  pview[01;31m[Ker-[m[K>redraw();
./src/app_geoview/GEO_GUI.cpp:234:  pview[01;31m[Ker-[m[K>reversePoly();
./src/app_geoview/GEO_GUI.cpp:236:  pview[01;31m[Ker-[m[K>redraw();
./src/app_geoview/GEO_GUI.cpp:244:  pview[01;31m[Ker-[m[K>setParam("snap", v/100.0);
./src/app_geoview/GEO_GUI.cpp:246:  pview[01;31m[Ker-[m[K>redraw();
./src/app_geoview/GEO_GUI.cpp:254:  pview[01;31m[Ker-[m[K>reApplySnapToCurrent();
./src/app_geoview/GEO_GUI.cpp:256:  pview[01;31m[Ker-[m[K>redraw();
./src/app_geoview/GEO_GUI.cpp:264:  pview[01;31m[Ker-[m[K>duplicateActive();
./src/app_geoview/GEO_GUI.cpp:265:  pview[01;31m[Ker-[m[K>redraw();
./src/app_geoview/GEO_GUI.cpp:273:  string str = pview[01;31m[Ker-[m[K>getPolySpec();
./src/app_geoview/GEO_GUI.cpp:285:  //string x_str = doubleToString(pview[01;31m[Ker-[m[K>getCrossHairMeters('x'), 2);
./src/app_geoview/GEO_GUI.cpp:286:  //string x_str = doubleToString(pview[01;31m[Ker-[m[K>getImgPctX(index), 6);
./src/app_geoview/GEO_GUI.cpp:290:  //string y_str = doubleToString(pview[01;31m[Ker-[m[K>getCrossHairMeters('y'), 2);
./src/app_geoview/GEO_GUI.cpp:291:  //string y_str = doubleToString(pview[01;31m[Ker-[m[K>getImgPctY(index), 6);
./src/app_geoview/GEO_GUI.cpp:295:  string str = pview[01;31m[Ker-[m[K>getPolySpec();
./src/app_geoview/GEO_GUI.cpp:299:  int mode = pview[01;31m[Ker-[m[K>getMode();
./src/app_geoview/GEO_GUI.cpp:309:  double dval = pview[01;31m[Ker-[m[K>getSnap();
./src/app_geoview/main.cpp:135:  gui->pview[01;31m[Ker-[m[K>setParam("tiff_file", tif_file);
./src/app_geoview/main.cpp:139:    gui->pview[01;31m[Ker-[m[K>setParam("view_polygon", all_poly_strings[j]);
./src/app_geoview/main.cpp:143:    gui->pview[01;31m[Ker-[m[K>setParam("view_point", all_point_strings[j]);
./src/app_geoview/main.cpp:147:    gui->pview[01;31m[Ker-[m[K>setParam("view_seglist", all_segl_strings[j]);
./src/app_geoview/main.cpp:151:    gui->pview[01;31m[Ker-[m[K>setParam("grid", all_grid_strings[j]);
./src/app_geoview/main.cpp:155:    gui->pview[01;31m[Ker-[m[K>setParam("view_circle", all_circle_strings[j]);
./src/app_geoview/main.cpp:159:    gui->pview[01;31m[Ker-[m[K>setParam("marker", all_markers[j]);
./src/app_geoview/main.cpp:163:    gui->pview[01;31m[Ker-[m[K>setParam("op_vertex", all_opvertices[j]);
./src/app_geoview/main.cpp:167:    gui->pview[01;31m[Ker-[m[K>setParam("geodesy_init", all_geodesy[j]);
./src/lib_logic/LogicBuffer.cpp:66:  m_info_buff[01;31m[Ker-[m[K>setValue(moosvar, value);
./src/lib_logic/LogicBuffer.cpp:77:  m_info_buff[01;31m[Ker-[m[K>setCurrTime(curr_time);
./src/lib_logic/LogicBuffer.cpp:88:  double curr_time = m_info_buff[01;31m[Ker-[m[K>getCurrTime();
./src/lib_logic/LogicBuffer.cpp:102:  m_info_buff[01;31m[Ker-[m[K>setValue(moosvar, value);
./src/lib_logic/LogicBuffer.cpp:121:    string s_result = m_info_buff[01;31m[Ker-[m[K>sQuery(varname, ok_s);
./src/lib_logic/LogicBuffer.cpp:122:    double d_result = m_info_buff[01;31m[Ker-[m[K>dQuery(varname, ok_d);
./src/lib_logic/LogicBuffer.cpp:197:    return(m_info_buff[01;31m[Ker-[m[K>getReport(allvars));    
./src/lib_logic/LogicBuffer.cpp:200:  return(m_info_buff[01;31m[Ker-[m[K>getReport());    
./src/app_alogcheck/LogChecker.cpp:275:    m_info_buff[01;31m[Ker-[m[K>setValue( m_timestamp, entry.getTimeStamp() );
./src/app_alogcheck/LogChecker.cpp:281:	return(m_info_buff[01;31m[Ker-[m[K>setValue(name, ddata));
./src/app_alogcheck/LogChecker.cpp:283:	return(m_info_buff[01;31m[Ker-[m[K>setValue(name, sdata));
./src/app_alogcheck/LogChecker.cpp:345:    string s_result = m_info_buff[01;31m[Ker-[m[K>sQuery(varname, ok_s);
./src/app_alogcheck/LogChecker.cpp:346:    double d_result = m_info_buff[01;31m[Ker-[m[K>dQuery(varname, ok_d);
./src/pContactMgrV20/ContactMgrV20_Info.cpp:43:  blk("  configured to post alerts with us[01;31m[Ker-[m[Kconfigured content about  ");
./src/uQueryDB/QueryDB.cpp:288:    return(m_info_buff[01;31m[Ker-[m[K>setValue(key, ddata));
./src/uQueryDB/QueryDB.cpp:290:    return(m_info_buff[01;31m[Ker-[m[K>setValue(key, sdata));
./src/uQueryDB/QueryDB.cpp:331:  vector<string> svector = m_info_buff[01;31m[Ker-[m[K>getReport(m_check_vars);
./src/uQueryDB/QueryDB.cpp:441:  vector<string> var_report = m_info_buff[01;31m[Ker-[m[K>getReport(m_check_vars);
./src/lib_contacts/NodeRecord.cpp:173:  // int[01;31m[Ker-[m[Kvehicle messaging like node reports.
./src/uTimerScript/TS_Info.cpp:177:  blk("  us[01;31m[Ker-[m[Kdefined scripts.                                         ");
./src/uTimerScript/TS_MOOSApp.cpp:76:  m_reset_time     = -1; // -1:none, 0:aft[01;31m[Ker-[m[Klast, NUM:atNUM
./src/uTimerScript/TS_MOOSApp.cpp:1040:    return(m_info_buff[01;31m[Ker-[m[K>setValue(key, ddata));
./src/uTimerScript/TS_MOOSApp.cpp:1043:    return(m_info_buff[01;31m[Ker-[m[K>setValue(key, sdata));
./src/uTimerScript/TS_MOOSApp.cpp:1076:    string s_result = m_info_buff[01;31m[Ker-[m[K>sQuery(varname, ok_s);
./src/uTimerScript/TS_MOOSApp.cpp:1077:    double d_result = m_info_buff[01;31m[Ker-[m[K>dQuery(varname, ok_d);
./src/lib_evalutil/LogicTestSequence.cpp:240:  vector<string> ibuff_report = m_info_buff[01;31m[Ker-[m[K>getReport(logic_vars, true);
./src/lib_marineview/MarineVehiGUI.cpp:176:    bool handled = m_mview[01;31m[Ker-[m[K>setParam(attr, value);
./src/lib_marineview/MarineVehiGUI.cpp:182:  value = m_mview[01;31m[Ker-[m[K>vehisetting(attr);
./src/lib_marineview/MarineVehiGUI.cpp:190:  m_mview[01;31m[Ker-[m[K>redraw();
./src/lib_marineview/MarineVehiGUI.cpp:249:  m_mview[01;31m[Ker-[m[K>setParam("cycle_active");
./src/lib_marineview/MarineVehiGUI.cpp:250:  m_mview[01;31m[Ker-[m[K>redraw();
./src/lib_marineview/MarineVehiGUI.cpp:262:    m_mview[01;31m[Ker-[m[K>setParam("trails_point_size", "bigger");
./src/lib_marineview/MarineVehiGUI.cpp:264:    m_mview[01;31m[Ker-[m[K>setParam("trails_point_size", "smaller");
./src/lib_marineview/MarineVehiGUI.cpp:265:  m_mview[01;31m[Ker-[m[K>redraw();
./src/lib_marineview/MarineVehiGUI.cpp:273:  m_mview[01;31m[Ker-[m[K>setParam("trails_color", "toggle");
./src/lib_marineview/MarineVehiGUI.cpp:274:  m_mview[01;31m[Ker-[m[K>redraw();
./src/lib_marineview/MarineVehiGUI.cpp:283:    m_mview[01;31m[Ker-[m[K>setParam("trails_length", "shorter");
./src/lib_marineview/MarineVehiGUI.cpp:285:    m_mview[01;31m[Ker-[m[K>setParam("trails_length", "longer");
./src/lib_marineview/MarineVehiGUI.cpp:286:  m_mview[01;31m[Ker-[m[K>redraw();
./src/lib_marineview/MarineVehiGUI.cpp:295:    m_mview[01;31m[Ker-[m[K>setParam("vehicle_shape_scale", "bigger");
./src/lib_marineview/MarineVehiGUI.cpp:297:    m_mview[01;31m[Ker-[m[K>setParam("vehicle_shape_scale", "smaller");
./src/lib_marineview/MarineVehiGUI.cpp:299:    m_mview[01;31m[Ker-[m[K>setParam("vehicle_shape_scale", "reset");
./src/lib_marineview/MarineVehiGUI.cpp:300:  m_mview[01;31m[Ker-[m[K>redraw();
./src/lib_marineview/MarineVehiGUI.cpp:309:    m_mview[01;31m[Ker-[m[K>setParam("center_view", "average");
./src/lib_marineview/MarineVehiGUI.cpp:311:    m_mview[01;31m[Ker-[m[K>setParam("center_view", "active");
./src/lib_marineview/MarineVehiGUI.cpp:313:  m_mview[01;31m[Ker-[m[K>redraw();
./src/lib_marineview/MarineGUI.cpp:454:    bool handled = m_mview[01;31m[Ker-[m[K>setParam(attr, value);
./src/lib_marineview/MarineGUI.cpp:460:  value = m_mview[01;31m[Ker-[m[K>geosetting(attr);
./src/lib_marineview/MarineGUI.cpp:476:    m_mview[01;31m[Ker-[m[K>setParam("zoom", 1.05);
./src/lib_marineview/MarineGUI.cpp:478:    m_mview[01;31m[Ker-[m[K>setParam("zoom", 0.80);
./src/lib_marineview/MarineGUI.cpp:480:    m_mview[01;31m[Ker-[m[K>setParam("zoom", "reset");
./src/lib_marineview/MarineGUI.cpp:481:  m_mview[01;31m[Ker-[m[K>redraw();
./src/lib_marineview/MarineGUI.cpp:482:  cout << "MarineGUI::cb_Zoom: " << m_mview[01;31m[Ker-[m[K>getZoom() << endl;
./src/lib_marineview/MarineGUI.cpp:490:  m_mview[01;31m[Ker-[m[K>setParam("pan_y", ((double)(amt))/10);
./src/lib_marineview/MarineGUI.cpp:492:  m_mview[01;31m[Ker-[m[K>redraw();
./src/lib_marineview/MarineGUI.cpp:501:  m_mview[01;31m[Ker-[m[K>setParam("pan_x", ((double)(amt))/10);
./src/lib_marineview/MarineGUI.cpp:503:  m_mview[01;31m[Ker-[m[K>redraw();
./src/lib_marineview/MarineGUI.cpp:511:  m_mview[01;31m[Ker-[m[K>setParam("tiff_type", "toggle");
./src/lib_marineview/MarineGUI.cpp:512:  m_mview[01;31m[Ker-[m[K>redraw();
./src/lib_marineview/MarineGUI.cpp:521:  m_mview[01;31m[Ker-[m[K>redraw();
./src/lib_marineview/MarineGUI.cpp:529:  m_mview[01;31m[Ker-[m[K>setParam("hash_shade_mod", (double)(amt)/20.0);
./src/lib_marineview/MarineGUI.cpp:530:  m_mview[01;31m[Ker-[m[K>redraw();
./src/lib_marineview/MarineGUI.cpp:539:  if(v==180) m_mview[01;31m[Ker-[m[K>setParam("tiff_viewable", "true");
./src/lib_marineview/MarineGUI.cpp:540:  else if(v==181) m_mview[01;31m[Ker-[m[K>setParam("tiff_viewable", "false");
./src/lib_marineview/MarineGUI.cpp:543:  else if(v==150) m_mview[01;31m[Ker-[m[K>setParam("polygon_viewable_all", "on");
./src/lib_marineview/MarineGUI.cpp:544:  else if(v==151) m_mview[01;31m[Ker-[m[K>setParam("polygon_viewable_all", "off");
./src/lib_marineview/MarineGUI.cpp:547:  else if(v==160) m_mview[01;31m[Ker-[m[K>setParam("polygon_viewable_labels", "on");
./src/lib_marineview/MarineGUI.cpp:548:  else if(v==161) m_mview[01;31m[Ker-[m[K>setParam("polygon_viewable_labels", "off");
./src/lib_marineview/MarineGUI.cpp:552:  else if(v==250) m_mview[01;31m[Ker-[m[K>setParam("seglist_viewable_all", "on");
./src/lib_marineview/MarineGUI.cpp:553:  else if(v==251) m_mview[01;31m[Ker-[m[K>setParam("seglist_viewable_all", "off");
./src/lib_marineview/MarineGUI.cpp:556:  else if(v==260) m_mview[01;31m[Ker-[m[K>setParam("seglist_viewable_labels", "on");
./src/lib_marineview/MarineGUI.cpp:557:  else if(v==261) m_mview[01;31m[Ker-[m[K>setParam("seglist_viewable_labels", "off");
./src/lib_marineview/MarineGUI.cpp:561:  else if(v==270) m_mview[01;31m[Ker-[m[K>setParam("seglr_viewable_all", "on");
./src/lib_marineview/MarineGUI.cpp:562:  else if(v==271) m_mview[01;31m[Ker-[m[K>setParam("seglr_viewable_all", "off");
./src/lib_marineview/MarineGUI.cpp:565:  else if(v==280) m_mview[01;31m[Ker-[m[K>setParam("seglr_viewable_labels", "on");
./src/lib_marineview/MarineGUI.cpp:566:  else if(v==281) m_mview[01;31m[Ker-[m[K>setParam("seglr_viewable_labels", "off");
./src/lib_marineview/MarineGUI.cpp:571:  else if(v==300) m_mview[01;31m[Ker-[m[K>setParam("grid_viewable_all", "true");
./src/lib_marineview/MarineGUI.cpp:572:  else if(v==301) m_mview[01;31m[Ker-[m[K>setParam("grid_viewable_all", "false");
./src/lib_marineview/MarineGUI.cpp:591:  else if(v==550) m_mview[01;31m[Ker-[m[K>setParam("point_viewable_all", "on");
./src/lib_marineview/MarineGUI.cpp:592:  else if(v==551) m_mview[01;31m[Ker-[m[K>setParam("point_viewable_all", "off");
./src/lib_marineview/MarineGUI.cpp:595:  else if(v==560) m_mview[01;31m[Ker-[m[K>setParam("point_viewable_labels", "on");
./src/lib_marineview/MarineGUI.cpp:596:  else if(v==561) m_mview[01;31m[Ker-[m[K>setParam("point_viewable_labels", "off");
./src/lib_marineview/MarineGUI.cpp:601:  else if(v==750) m_mview[01;31m[Ker-[m[K>setParam("vector_viewable_all", "on");
./src/lib_marineview/MarineGUI.cpp:602:  else if(v==751) m_mview[01;31m[Ker-[m[K>setParam("vector_viewable_all", "of");
./src/lib_marineview/MarineGUI.cpp:605:  else if(v==760) m_mview[01;31m[Ker-[m[K>setParam("vector_viewable_labels", "on");
./src/lib_marineview/MarineGUI.cpp:606:  else if(v==761) m_mview[01;31m[Ker-[m[K>setParam("vector_viewable_labels", "off");
./src/lib_marineview/MarineGUI.cpp:610:  else if(v==850) m_mview[01;31m[Ker-[m[K>setParam("circle_viewable_all", "on");
./src/lib_marineview/MarineGUI.cpp:611:  else if(v==851) m_mview[01;31m[Ker-[m[K>setParam("circle_viewable_all", "off");
./src/lib_marineview/MarineGUI.cpp:614:  else if(v==860) m_mview[01;31m[Ker-[m[K>setParam("circle_viewable_labels", "on");
./src/lib_marineview/MarineGUI.cpp:615:  else if(v==861) m_mview[01;31m[Ker-[m[K>setParam("circle_viewable_labels", "off");
./src/lib_marineview/MarineGUI.cpp:619:  else if(v==400) m_mview[01;31m[Ker-[m[K>setParam("datum_viewable", "on");
./src/lib_marineview/MarineGUI.cpp:620:  else if(v==401) m_mview[01;31m[Ker-[m[K>setParam("datum_viewable", "off");
./src/lib_marineview/MarineGUI.cpp:623:  else if(v==410) m_mview[01;31m[Ker-[m[K>setParam("datum_color", "red");
./src/lib_marineview/MarineGUI.cpp:624:  else if(v==411) m_mview[01;31m[Ker-[m[K>setParam("datum_color", "white");
./src/lib_marineview/MarineGUI.cpp:625:  else if(v==412) m_mview[01;31m[Ker-[m[K>setParam("datum_color", "yellow");
./src/lib_marineview/MarineGUI.cpp:626:  else if(v==413) m_mview[01;31m[Ker-[m[K>setParam("datum_color", "dark_blue");
./src/lib_marineview/MarineGUI.cpp:627:  else if(v==414) m_mview[01;31m[Ker-[m[K>setParam("datum_color", "dark_green");
./src/lib_marineview/MarineGUI.cpp:643:  else if(v==900) m_mview[01;31m[Ker-[m[K>setParam("marker_viewable_all", "true");
./src/lib_marineview/MarineGUI.cpp:644:  else if(v==901) m_mview[01;31m[Ker-[m[K>setParam("marker_viewable_all", "false");
./src/lib_marineview/MarineGUI.cpp:647:  else if(v==910) m_mview[01;31m[Ker-[m[K>setParam("marker_viewable_labels", "true");
./src/lib_marineview/MarineGUI.cpp:648:  else if(v==911) m_mview[01;31m[Ker-[m[K>setParam("marker_viewable_labels", "false");
./src/lib_marineview/MarineGUI.cpp:651:  else if(v==920) m_mview[01;31m[Ker-[m[K>setParam("marker_scale", "1");
./src/lib_marineview/MarineGUI.cpp:652:  else if(v==921) m_mview[01;31m[Ker-[m[K>setParam("marker_scale", "scale:0.9");
./src/lib_marineview/MarineGUI.cpp:653:  else if(v==922) m_mview[01;31m[Ker-[m[K>setParam("marker_scale", "scale:1.1");
./src/lib_marineview/MarineGUI.cpp:656:  else if(v==950) m_mview[01;31m[Ker-[m[K>setParam("oparea_viewable_all", "true");
./src/lib_marineview/MarineGUI.cpp:657:  else if(v==951) m_mview[01;31m[Ker-[m[K>setParam("oparea_viewable_all", "false");
./src/lib_marineview/MarineGUI.cpp:660:  else if(v==960) m_mview[01;31m[Ker-[m[K>setParam("oparea_viewable_labels", "true");
./src/lib_marineview/MarineGUI.cpp:661:  else if(v==961) m_mview[01;31m[Ker-[m[K>setParam("oparea_viewable_labels", "false");
./src/lib_marineview/MarineGUI.cpp:664:  else if(v==970) m_mview[01;31m[Ker-[m[K>setParam("op_area_config", "reset");
./src/lib_marineview/MarineGUI.cpp:665:  else if(v==971) m_mview[01;31m[Ker-[m[K>setParam("op_area_line_shade_mod", "0.95");
./src/lib_marineview/MarineGUI.cpp:666:  else if(v==972) m_mview[01;31m[Ker-[m[K>setParam("op_area_line_shade_mod", "1.05");
./src/lib_marineview/MarineGUI.cpp:669:  else if(v==3100) m_mview[01;31m[Ker-[m[K>setParam("drop_point_edit", "clear");
./src/lib_marineview/MarineGUI.cpp:670:  else if(v==3101) m_mview[01;31m[Ker-[m[K>setParam("drop_point_edit", "clear_last");
./src/lib_marineview/MarineGUI.cpp:671:  else if(v==3110) m_mview[01;31m[Ker-[m[K>setParam("drop_point_coords", "as-dropped");
./src/lib_marineview/MarineGUI.cpp:672:  else if(v==3111) m_mview[01;31m[Ker-[m[K>setParam("drop_point_coords", "lat-lon");
./src/lib_marineview/MarineGUI.cpp:673:  else if(v==3112) m_mview[01;31m[Ker-[m[K>setParam("drop_point_coords", "local-grid");
./src/lib_marineview/MarineGUI.cpp:674:  else if(v==3121) m_mview[01;31m[Ker-[m[K>setParam("drop_point_vertex_size", "1");
./src/lib_marineview/MarineGUI.cpp:675:  else if(v==3122) m_mview[01;31m[Ker-[m[K>setParam("drop_point_vertex_size", "2");
./src/lib_marineview/MarineGUI.cpp:676:  else if(v==3123) m_mview[01;31m[Ker-[m[K>setParam("drop_point_vertex_size", "3");
./src/lib_marineview/MarineGUI.cpp:677:  else if(v==3124) m_mview[01;31m[Ker-[m[K>setParam("drop_point_vertex_size", "4");
./src/lib_marineview/MarineGUI.cpp:678:  else if(v==3125) m_mview[01;31m[Ker-[m[K>setParam("drop_point_vertex_size", "5");
./src/lib_marineview/MarineGUI.cpp:679:  else if(v==3126) m_mview[01;31m[Ker-[m[K>setParam("drop_point_vertex_size", "6");
./src/lib_marineview/MarineGUI.cpp:680:  else if(v==3127) m_mview[01;31m[Ker-[m[K>setParam("drop_point_vertex_size", "7");
./src/lib_marineview/MarineGUI.cpp:681:  else if(v==3128) m_mview[01;31m[Ker-[m[K>setParam("drop_point_vertex_size", "8");
./src/lib_marineview/MarineGUI.cpp:682:  else if(v==3129) m_mview[01;31m[Ker-[m[K>setParam("drop_point_vertex_size", "9");
./src/lib_marineview/MarineGUI.cpp:683:  else if(v==3130) m_mview[01;31m[Ker-[m[K>setParam("drop_point_vertex_size", "10");
./src/lib_marineview/MarineGUI.cpp:684:  else if(v==3131) m_mview[01;31m[Ker-[m[K>setParam("drop_point_viewable_all", "true");
./src/lib_marineview/MarineGUI.cpp:685:  else if(v==3132) m_mview[01;31m[Ker-[m[K>setParam("drop_point_viewable_all", "false");
./src/lib_marineview/MarineGUI.cpp:688:  else if(v==4150) m_mview[01;31m[Ker-[m[K>setParam("range_pulse_viewable_all", "true");
./src/lib_marineview/MarineGUI.cpp:689:  else if(v==4151) m_mview[01;31m[Ker-[m[K>setParam("range_pulse_viewable_all", "false");
./src/lib_marineview/MarineGUI.cpp:692:  else if(v==4160) m_mview[01;31m[Ker-[m[K>setParam("comms_pulse_viewable_all", "true");
./src/lib_marineview/MarineGUI.cpp:693:  else if(v==4161) m_mview[01;31m[Ker-[m[K>setParam("comms_pulse_viewable_all", "false");
./src/lib_marineview/MarineGUI.cpp:696:  else if(v==4170) m_mview[01;31m[Ker-[m[K>setParam("node_pulse_viewable_all", "true");
./src/lib_marineview/MarineGUI.cpp:697:  else if(v==4171) m_mview[01;31m[Ker-[m[K>setParam("node_pulse_viewable_all", "false");
./src/lib_marineview/MarineGUI.cpp:703:  m_mview[01;31m[Ker-[m[K>redraw();
./src/lib_marineview/MarineGUI.cpp:711:  m_mview[01;31m[Ker-[m[K>setParam("hash_delta", ulintToString(amt));
./src/lib_marineview/MarineGUI.cpp:712:  m_mview[01;31m[Ker-[m[K>redraw();
./src/lib_marineview/MarineGUI.cpp:720:  m_mview[01;31m[Ker-[m[K>setParam("back_shade_delta", (double)(amt)/20.0);
./src/lib_marineview/MarineGUI.cpp:721:  m_mview[01;31m[Ker-[m[K>redraw();
./src/lib_ipfview/Common_IPF_GUI.cpp:53:    return(m_view[01;31m[Ker-[m[K>setParam(param, value));
./src/lib_ipfview/Common_IPF_GUI.cpp:63:    return(m_view[01;31m[Ker-[m[K>setParam(param, value));
./src/lib_ipfview/Common_IPF_GUI.cpp:237://            between sub-widgets. We ov[01;31m[Ker-[m[Kride that here to do the 
./src/lib_ipfview/Common_IPF_GUI.cpp:267:    m_view[01;31m[Ker-[m[K>setParam("mod_zoom", 1.25);
./src/lib_ipfview/Common_IPF_GUI.cpp:269:    m_view[01;31m[Ker-[m[K>setParam("mod_zoom", 0.80);
./src/lib_ipfview/Common_IPF_GUI.cpp:278:    m_view[01;31m[Ker-[m[K>setParam("reset_view", "1");
./src/lib_ipfview/Common_IPF_GUI.cpp:280:    m_view[01;31m[Ker-[m[K>setParam("reset_view", "2");
./src/lib_ipfview/Common_IPF_GUI.cpp:282:    m_view[01;31m[Ker-[m[K>setParam("reset_view", "3");
./src/lib_ipfview/Common_IPF_GUI.cpp:284:    m_view[01;31m[Ker-[m[K>setParam("reset_view", "4");
./src/lib_ipfview/Common_IPF_GUI.cpp:293:  m_view[01;31m[Ker-[m[K>setParam("mod_x_rotation", (double)(amt));
./src/lib_ipfview/Common_IPF_GUI.cpp:302:  m_view[01;31m[Ker-[m[K>setParam("mod_z_rotation", (double)(amt));
./src/lib_ipfview/Common_IPF_GUI.cpp:310:  m_view[01;31m[Ker-[m[K>setParam("mod_scale", (((double)amt)/100.0));
./src/lib_ipfview/Common_IPF_GUI.cpp:318:  m_view[01;31m[Ker-[m[K>setParam("mod_ship_scale", (((double)amt)/100.0));
./src/lib_ipfview/Common_IPF_GUI.cpp:326:  m_view[01;31m[Ker-[m[K>setParam("mod_base_ipf", amt);
./src/lib_ipfview/Common_IPF_GUI.cpp:336:    m_view[01;31m[Ker-[m[K>setParam("toggle_frame_on_top", amt);    
./src/lib_ipfview/Common_IPF_GUI.cpp:338:    m_view[01;31m[Ker-[m[K>setParam("mod_base_ipf", amt);
./src/lib_ipfview/Common_IPF_GUI.cpp:339:    m_view[01;31m[Ker-[m[K>setParam("mod_base_frame", amt);
./src/lib_ipfview/Common_IPF_GUI.cpp:349:  m_view[01;31m[Ker-[m[K>setParam("draw_frame", "toggle");
./src/lib_ipfview/Common_IPF_GUI.cpp:357:  m_view[01;31m[Ker-[m[K>setParam("draw_ipf", "toggle");
./src/lib_ipfview/Common_IPF_GUI.cpp:358:  m_view[01;31m[Ker-[m[K>redraw();
./src/lib_ipfview/Common_IPF_GUI.cpp:366:  m_view[01;31m[Ker-[m[K>setParam("draw_ship", "toggle");
./src/lib_ipfview/Common_IPF_GUI.cpp:367:  m_view[01;31m[Ker-[m[K>redraw();
./src/lib_ipfview/Common_IPF_GUI.cpp:375:  m_view[01;31m[Ker-[m[K>setParam("draw_pclines", "toggle");
./src/lib_ipfview/Common_IPF_GUI.cpp:376:  m_view[01;31m[Ker-[m[K>redraw();
./src/lib_ipfview/Common_IPF_GUI.cpp:384:  m_view[01;31m[Ker-[m[K>setParam("draw_pieces", "toggle");
./src/lib_ipfview/Common_IPF_GUI.cpp:385:  m_view[01;31m[Ker-[m[K>redraw();
./src/lib_ipfview/Common_IPF_GUI.cpp:394:  m_view[01;31m[Ker-[m[K>setParam("mod_frame_height", (double)amt);
./src/lib_ipfview/Common_IPF_GUI.cpp:403:    m_view[01;31m[Ker-[m[K>setParam("frame_color", "lighter");
./src/lib_ipfview/Common_IPF_GUI.cpp:405:    m_view[01;31m[Ker-[m[K>setParam("frame_color", "darker");
./src/lib_ipfview/Common_IPF_GUI.cpp:418:  m_view[01;31m[Ker-[m[K>setColorMap(str);
./src/lib_ipfview/Common_IPF_GUI.cpp:419:  m_view[01;31m[Ker-[m[K>redraw();
./src/lib_ipfview/Common_IPF_GUI.cpp:428:    m_view[01;31m[Ker-[m[K>setParam("clear_color", "white");
./src/lib_ipfview/Common_IPF_GUI.cpp:430:    m_view[01;31m[Ker-[m[K>setParam("clear_color", "0.285,0.242,0.469");
./src/lib_ipfview/Common_IPF_GUI.cpp:432:    m_view[01;31m[Ker-[m[K>setParam("clear_color", "macbeige");
./src/lib_ipfview/Common_IPF_GUI.cpp:435:  m_view[01;31m[Ker-[m[K>redraw();
./src/lib_ipfview/Common_IPF_GUI.cpp:444:    m_view[01;31m[Ker-[m[K>setParam("polar", index);
./src/lib_ipfview/Common_IPF_GUI.cpp:447:  m_view[01;31m[Ker-[m[K>redraw();
./src/uFldShoreBroker/ShoreBroker_Info.cpp:41:  blk("  registration requests to shoreside pShare to share us[01;31m[Ker-[m[K      ");
./src/uFldShoreBroker/ShoreBroker_Info.cpp:44:  blk("  for all such us[01;31m[Ker-[m[Kconfigured variables.                       ");
./src/app_zaic_hdg/ZAIC_HDG_GUI.cpp:62:  m_zaic_view[01;31m[Ker-[m[K>setModel(m_zaic_model);
./src/lib_bhvutil/RefineryCPA.cpp:1044://            (Search count[01;31m[Ker-[m[Kclockwise)
./src/lib_bhvutil/RefineryCPA.cpp:1098://            (Search count[01;31m[Ker-[m[Kclockwise)
./src/lib_bhvutil/RefineryCPA.cpp:1324:  // Phase 2: Secondary sweep count[01;31m[Ker-[m[Kclockwise until a hdg is found
./src/lib_bhvutil/RefineryCPA.cpp:1469:  // Phase 1: Initial sweep count[01;31m[Ker-[m[Kclockwise until a (hdg,spd)
./src/lib_behaviors-marine/BHV_LegRun.cpp:447:  // us[01;31m[Ker-[m[Kset parameter
./src/lib_behaviors-marine/BHV_HeadingChange.cpp:189:  else if(m_turn_type == "port") {   // count[01;31m[Ker-[m[Kclockwise
./src/lib_behaviors-marine/BHV_Waypoint.cpp:927:    string s_result = m_info_buff[01;31m[Ker-[m[K>sQuery(varname, ok_s);
./src/lib_behaviors-marine/BHV_Waypoint.cpp:928:    double d_result = m_info_buff[01;31m[Ker-[m[K>dQuery(varname, ok_d);
./src/pHelmIvP/HelmIvP.cpp:194:  m_info_buff[01;31m[Ker-[m[K>setCurrTime(m_curr_time);
./src/pHelmIvP/HelmIvP.cpp:329:  m_info_buff[01;31m[Ker-[m[K>setValue("COMMS_POLICY", commsPolicy(), m_curr_time);
./src/pHelmIvP/HelmIvP.cpp:350:    m_info_buff[01;31m[Ker-[m[K>clearDeltaVectors();
./src/pHelmIvP/HelmIvP.cpp:364:    m_info_buff[01;31m[Ker-[m[K>setCurrTime(m_curr_time);
./src/pHelmIvP/HelmIvP.cpp:377:    m_info_buff[01;31m[Ker-[m[K>clearDeltaVectors();
./src/pHelmIvP/HelmIvP.cpp:530:  m_info_buff[01;31m[Ker-[m[K>clearDeltaVectors();
./src/pHelmIvP/HelmIvP.cpp:620:	  m_info_buff[01;31m[Ker-[m[K>setValue(var, sdata);
./src/pHelmIvP/HelmIvP.cpp:635:	  m_info_buff[01;31m[Ker-[m[K>setValue(var, ddata);
./src/pHelmIvP/HelmIvP.cpp:832:	m_info_buff[01;31m[Ker-[m[K>setValue(var, sdata);
./src/pHelmIvP/HelmIvP.cpp:836:	m_info_buff[01;31m[Ker-[m[K>setValue(var, ddata);
./src/pHelmIvP/HelmIvP.cpp:873:	  m_info_buff[01;31m[Ker-[m[K>setValue(var, sdata);
./src/pHelmIvP/HelmIvP.cpp:877:	  m_info_buff[01;31m[Ker-[m[K>setValue(var, ddata);
./src/pHelmIvP/HelmIvP.cpp:911:    if((key == "defer") && !m_info_buff[01;31m[Ker-[m[K>isKnown(var)) {
./src/pHelmIvP/HelmIvP.cpp:913:	m_info_buff[01;31m[Ker-[m[K>setValue(var, sdata);
./src/pHelmIvP/HelmIvP.cpp:917:	m_info_buff[01;31m[Ker-[m[K>setValue(var, ddata);
./src/pHelmIvP/HelmIvP.cpp:963:	m_info_buff[01;31m[Ker-[m[K>setValue(var, sdata);
./src/pHelmIvP/HelmIvP.cpp:968:	m_info_buff[01;31m[Ker-[m[K>setValue(var, ddata);
./src/pHelmIvP/HelmIvP.cpp:1077:    return(m_info_buff[01;31m[Ker-[m[K>setValue(moosvar, msg.GetDouble(), msg_time));
./src/pHelmIvP/HelmIvP.cpp:1080:    return(m_info_buff[01;31m[Ker-[m[K>setValue(moosvar, msg.GetString(), msg_time));
./src/pHelmIvP/HelmIvP.cpp:1204:    m_info_buff[01;31m[Ker-[m[K>setCurrTime(m_curr_time);
./src/pHelmIvP/HelmIvP.cpp:1205:    m_info_buff[01;31m[Ker-[m[K>setStartTime(m_helm_start_time);
./src/pHelmIvP/HelmIvP.cpp:1233:    m_ledg[01;31m[Ker-[m[K>setCurrTimeUTC(m_curr_time);
./src/pHelmIvP/HelmIvP.cpp:1234:    m_ledg[01;31m[Ker-[m[K>setGeodesy(m_geodesy);
./src/pHelmIvP/HelmIvP.cpp:1731:  string vname1 = m_ledg[01;31m[Ker-[m[K>processNodeReport(report, whynot);
./src/pHelmIvP/HelmIvP.cpp:1758:  m_info_buff[01;31m[Ker-[m[K>setValue(vname+"_NAV_X", new_record.getX());
./src/pHelmIvP/HelmIvP.cpp:1759:  m_info_buff[01;31m[Ker-[m[K>setValue(vname+"_NAV_Y", new_record.getY());
./src/pHelmIvP/HelmIvP.cpp:1760:  m_info_buff[01;31m[Ker-[m[K>setValue(vname+"_NAV_SPEED", new_record.getSpeed());
./src/pHelmIvP/HelmIvP.cpp:1761:  m_info_buff[01;31m[Ker-[m[K>setValue(vname+"_NAV_HEADING", new_record.getHeading());
./src/pHelmIvP/HelmIvP.cpp:1762:  m_info_buff[01;31m[Ker-[m[K>setValue(vname+"_NAV_DEPTH", new_record.getDepth());
./src/pHelmIvP/HelmIvP.cpp:1763:  m_info_buff[01;31m[Ker-[m[K>setValue(vname+"_NAV_LAT", new_record.getLat());
./src/pHelmIvP/HelmIvP.cpp:1764:  m_info_buff[01;31m[Ker-[m[K>setValue(vname+"_NAV_LONG", new_record.getLon());
./src/pHelmIvP/HelmIvP.cpp:1765:  m_info_buff[01;31m[Ker-[m[K>setValue(vname+"_NAV_GROUP", new_record.getGroup());
./src/pHelmIvP/HelmIvP.cpp:1766:  m_info_buff[01;31m[Ker-[m[K>setValue(vname+"_NAV_TYPE", new_record.getType());
./src/pHelmIvP/HelmIvP.cpp:1778:  m_info_buff[01;31m[Ker-[m[K>setValue(vname+"_NAV_UTC", timestamp);
./src/pHelmIvP/HelmIvP.cpp:1847:  double osx = m_info_buff[01;31m[Ker-[m[K>dQuery("NAV_X", ok1);
./src/pHelmIvP/HelmIvP.cpp:1848:  double osy = m_info_buff[01;31m[Ker-[m[K>dQuery("NAV_Y", ok2);
./src/pHelmIvP/HelmIvP.cpp:1849:  double osh = m_info_buff[01;31m[Ker-[m[K>dQuery("NAV_HEADING", ok3);
./src/pHelmIvP/HelmIvP.cpp:1850:  double osv = m_info_buff[01;31m[Ker-[m[K>dQuery("NAV_SPEED", ok4);
./src/pHelmIvP/HelmIvP.cpp:1855:  m_pmgen.setCurrTime(m_info_buff[01;31m[Ker-[m[K>getCurrTime());
./src/pHelmIvP/HelmEngine.cpp:274:	string bhv_error_str = m_info_buff[01;31m[Ker-[m[K>sQuery("BHV_ERROR", ok);
./src/pHelmIvP/HelmEngine.cpp:514:      m_info_buff[01;31m[Ker-[m[K>setValue((post_str + "_UNFILTERED"), decision);
./src/app_zaic_hleq/ZAIC_HLEQ_GUI.cpp:63:  m_zaic_view[01;31m[Ker-[m[K>setModel(m_zaic_model);
./src/app_zaic_hleq/ZAIC_HLEQ_GUI.cpp:120:  m_zaic_view[01;31m[Ker-[m[K>redraw();
./src/lib_zaicview/ZAIC_GUI.cpp:123:  m_zaic_view[01;31m[Ker-[m[K>redraw();
./src/lib_zaicview/ZAIC_GUI.cpp:133:  m_zaic_view[01;31m[Ker-[m[K>redraw();
./src/lib_zaicview/ZAIC_GUI.cpp:142:    m_zaic_view[01;31m[Ker-[m[K>setParam("gridsize", "reset");
./src/lib_zaicview/ZAIC_GUI.cpp:144:    m_zaic_view[01;31m[Ker-[m[K>setParam("gridsize", "down");
./src/lib_zaicview/ZAIC_GUI.cpp:146:    m_zaic_view[01;31m[Ker-[m[K>setParam("gridsize", "up");
./src/lib_zaicview/ZAIC_GUI.cpp:148:  m_zaic_view[01;31m[Ker-[m[K>redraw();
./src/lib_zaicview/ZAIC_GUI.cpp:157:    m_zaic_view[01;31m[Ker-[m[K>setParam("gridshade", "reset");
./src/lib_zaicview/ZAIC_GUI.cpp:159:    m_zaic_view[01;31m[Ker-[m[K>setParam("gridshade", "down");
./src/lib_zaicview/ZAIC_GUI.cpp:161:    m_zaic_view[01;31m[Ker-[m[K>setParam("gridshade", "up");
./src/lib_zaicview/ZAIC_GUI.cpp:163:  m_zaic_view[01;31m[Ker-[m[K>redraw();
./src/lib_zaicview/ZAIC_GUI.cpp:172:    m_zaic_view[01;31m[Ker-[m[K>setParam("lineshade", "reset");
./src/lib_zaicview/ZAIC_GUI.cpp:174:    m_zaic_view[01;31m[Ker-[m[K>setParam("lineshade", "down");
./src/lib_zaicview/ZAIC_GUI.cpp:176:    m_zaic_view[01;31m[Ker-[m[K>setParam("lineshade", "up");
./src/lib_zaicview/ZAIC_GUI.cpp:178:  m_zaic_view[01;31m[Ker-[m[K>redraw();
./src/lib_zaicview/ZAIC_GUI.cpp:187:    m_zaic_view[01;31m[Ker-[m[K>setParam("backshade", "reset");
./src/lib_zaicview/ZAIC_GUI.cpp:189:    m_zaic_view[01;31m[Ker-[m[K>setParam("backshade", "down");
./src/lib_zaicview/ZAIC_GUI.cpp:191:    m_zaic_view[01;31m[Ker-[m[K>setParam("backshade", "up");
./src/lib_zaicview/ZAIC_GUI.cpp:193:  m_zaic_view[01;31m[Ker-[m[K>redraw();
./src/lib_zaicview/ZAIC_GUI.cpp:201:  m_zaic_view[01;31m[Ker-[m[K>toggleVerbose();
./src/lib_zaicview/ZAIC_GUI.cpp:202:  m_zaic_view[01;31m[Ker-[m[K>redraw();
./src/lib_zaicview/ZAIC_GUI.cpp:210:  m_zaic_view[01;31m[Ker-[m[K>setParam("labels", "toggle");
./src/lib_zaicview/ZAIC_GUI.cpp:211:  m_zaic_view[01;31m[Ker-[m[K>redraw();
./src/lib_zaicview/ZAIC_GUI.cpp:220:  m_zaic_view[01;31m[Ker-[m[K>setParam("color_scheme", "toggle");
./src/lib_zaicview/ZAIC_GUI.cpp:221:  m_zaic_view[01;31m[Ker-[m[K>redraw();
./src/pMissionEval/MissionEval_Info.cpp:42:  blk("  with results posted in us[01;31m[Ker-[m[Kconfigurable flags. The point in  ");
./src/pMissionEval/MissionEval.cpp:67:      m_info_buff[01;31m[Ker-[m[K>setValue(key, dval, mtime);
./src/pMissionEval/MissionEval.cpp:69:      m_info_buff[01;31m[Ker-[m[K>setValue(key, sval, mtime);
./src/pMissionEval/MissionEval.cpp:104:  m_info_buff[01;31m[Ker-[m[K>setCurrTime(m_curr_time);
./src/pMissionEval/MissionEval.cpp:394:    string sval = m_info_buff[01;31m[Ker-[m[K>sQuery(var, ok);
./src/pMissionEval/MissionEval.cpp:398:      double dval = m_info_buff[01;31m[Ker-[m[K>dQuery(var, ok);
./src/pMissionEval/MissionEval.cpp:452:    string sval = m_info_buff[01;31m[Ker-[m[K>sQuery(var, ok);
./src/pMissionEval/MissionEval.cpp:453:    double dval = m_info_buff[01;31m[Ker-[m[K>dQuery(var, ok);
./src/app_zaic_peak/ZAIC_PEAK_GUI.cpp:49:  m_zaic_view[01;31m[Ker-[m[K>setModel(m_zaic_model);
./src/app_zaic_peak/ZAIC_PEAK_GUI.cpp:164:  m_zaic_view[01;31m[Ker-[m[K>redraw();
./src/app_zaic_peak/ZAIC_PEAK_GUI.cpp:174:  m_zaic_view[01;31m[Ker-[m[K>redraw();
./src/app_alogeval/ALogEvaluator.cpp:219:      m_info_buff[01;31m[Ker-[m[K>setValue(varname, dval, tstamp_dbl);
./src/app_alogeval/ALogEvaluator.cpp:221:      m_info_buff[01;31m[Ker-[m[K>setValue(varname, varval, tstamp_dbl);
./src/app_alogview/LogViewLauncher.cpp:396:  m_gui->np_view[01;31m[Ker-[m[K>setParam("set_pan_x", m_start_panx);
./src/app_alogview/LogViewLauncher.cpp:397:  m_gui->np_view[01;31m[Ker-[m[K>setParam("set_pan_y", m_start_pany);
./src/app_alogview/LogViewLauncher.cpp:398:  m_gui->np_view[01;31m[Ker-[m[K>setParam("set_zoom", m_start_zoom);
./src/app_alogview/LogViewLauncher.cpp:399:  m_gui->np_view[01;31m[Ker-[m[K>setVerbose(m_verbose);
./src/app_alogview/LogViewLauncher.cpp:403:    m_gui->np_view[01;31m[Ker-[m[K>setParam(param, value);
./src/app_alogview/LogViewLauncher.cpp:411:    m_gui->np_view[01;31m[Ker-[m[K>setParam("tiff_file", m_tiff_files[i]);
./src/app_alogview/LogViewLauncher.cpp:414:    m_gui->np_view[01;31m[Ker-[m[K>setMinimalMem();
./src/app_alogview/LogViewLauncher.cpp:416:    m_gui->np_view[01;31m[Ker-[m[K>setAltNavPrefix(m_alt_nav_prefix);
./src/app_alogview/LogViewLauncher.cpp:419:  double img_wid_mtrs = m_gui->np_view[01;31m[Ker-[m[K>getImgWidthMtrs();
./src/app_alogview/LogViewLauncher.cpp:421:    m_gui->np_view[01;31m[Ker-[m[K>setParam("hash_delta", "1000000");
./src/app_alogview/LogViewLauncher.cpp:423:    m_gui->np_view[01;31m[Ker-[m[K>setParam("hash_delta", "100000");
./src/app_alogview/LogViewLauncher.cpp:425:    m_gui->np_view[01;31m[Ker-[m[K>setParam("hash_delta", "10000");
./src/app_alogview/LogViewLauncher.cpp:427:    m_gui->np_view[01;31m[Ker-[m[K>setParam("hash_delta", "1000");
./src/app_alogview/LogViewLauncher.cpp:429:    m_gui->np_view[01;31m[Ker-[m[K>setParam("hash_delta", "100");
./src/app_alogview/LogViewLauncher.cpp:431:    m_gui->np_view[01;31m[Ker-[m[K>setParam("hash_delta", "50");
./src/app_alogview/GUI_HelmScope.cpp:176:  m_fld_it[01;31m[Ker-[m[K>clear_visible_focus();
./src/app_alogview/GUI_HelmScope.cpp:177:  m_fld_it[01;31m[Ker-[m[K>color(fcolor1); 
./src/app_alogview/GUI_HelmScope.cpp:227:  m_fld_it[01;31m[Ker-[m[K>resize(410, 5, 50, 20);
./src/app_alogview/GUI_HelmScope.cpp:233:  m_fld_it[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_HelmScope.cpp:269:  m_fld_it[01;31m[Ker-[m[K>textsize(info_size); 
./src/app_alogview/GUI_HelmScope.cpp:270:  m_fld_it[01;31m[Ker-[m[K>labelsize(info_size);
./src/app_alogview/GUI_HelmScope.cpp:469:  m_fld_it[01;31m[Ker-[m[K>value(iter.c_str());
./src/app_alogview/GUI_IPF.cpp:94:  m_ipf_view[01;31m[Ker-[m[K>setClearColor("0.6,0.7,0.5");
./src/app_alogview/GUI_IPF.cpp:108:  m_fld_ipf_it[01;31m[Ker-[m[K>clear_visible_focus();
./src/app_alogview/GUI_IPF.cpp:109:  m_fld_ipf_it[01;31m[Ker-[m[K>color(fcolor1); 
./src/app_alogview/GUI_IPF.cpp:177:  m_ipf_view[01;31m[Ker-[m[K>Common_IPFViewer::resize(ipf_x, ipf_y, ipf_wid, ipf_hgt);
./src/app_alogview/GUI_IPF.cpp:203:  m_fld_ipf_it[01;31m[Ker-[m[K>resize(iter_x, iter_y, iter_wid, fld_hgt); 
./src/app_alogview/GUI_IPF.cpp:281:  m_fld_ipf_it[01;31m[Ker-[m[K>textsize(info_size); 
./src/app_alogview/GUI_IPF.cpp:282:  m_fld_ipf_it[01;31m[Ker-[m[K>labelsize(info_size);
./src/app_alogview/GUI_IPF.cpp:377:  m_ipf_view[01;31m[Ker-[m[K>setDataBroker(m_dbroker, vname);
./src/app_alogview/GUI_IPF.cpp:378:  m_ipf_view[01;31m[Ker-[m[K>setIPF_Plots(m_sources);
./src/app_alogview/GUI_IPF.cpp:379:  m_ipf_view[01;31m[Ker-[m[K>setHelmIterPlot();
./src/app_alogview/GUI_IPF.cpp:459:  m_ipf_view[01;31m[Ker-[m[K>setTime(curr_time);
./src/app_alogview/GUI_IPF.cpp:460:  m_ipf_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_IPF.cpp:472:    string pwt = m_ipf_view[01;31m[Ker-[m[K>getCurrPriority(m_sources[i]);
./src/app_alogview/GUI_IPF.cpp:475:      m_ipf_view[01;31m[Ker-[m[K>setSource(m_source);
./src/app_alogview/GUI_IPF.cpp:484:  m_ipf_view[01;31m[Ker-[m[K>setParam("mod_x_rotation", ((double)(-damt)));
./src/app_alogview/GUI_IPF.cpp:485:  m_ipf_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_IPF.cpp:497:  m_ipf_view[01;31m[Ker-[m[K>setParam("mod_z_rotation", ((double)(damt)));
./src/app_alogview/GUI_IPF.cpp:498:  m_ipf_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_IPF.cpp:510:    m_ipf_view[01;31m[Ker-[m[K>setParam("mod_zoom", 1.05); 
./src/app_alogview/GUI_IPF.cpp:512:    m_ipf_view[01;31m[Ker-[m[K>setParam("mod_zoom", 0.95); 
./src/app_alogview/GUI_IPF.cpp:514:    m_ipf_view[01;31m[Ker-[m[K>setParam("set_zoom", 1.0); 
./src/app_alogview/GUI_IPF.cpp:515:  m_ipf_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_IPF.cpp:520:  m_ipf_view[01;31m[Ker-[m[K>setParam("reset_view", "2");
./src/app_alogview/GUI_IPF.cpp:528:  m_ipf_view[01;31m[Ker-[m[K>setParam("draw_pin", "toggle");
./src/app_alogview/GUI_IPF.cpp:558:  m_ipf_view[01;31m[Ker-[m[K>setSource(m_source);
./src/app_alogview/GUI_IPF.cpp:576:      m_ipf_view[01;31m[Ker-[m[K>setSource("collective-hdgspd");
./src/app_alogview/GUI_IPF.cpp:580:      m_ipf_view[01;31m[Ker-[m[K>setSource(m_source);
./src/app_alogview/GUI_IPF.cpp:584:      m_ipf_view[01;31m[Ker-[m[K>setSource("collective-depth"); 
./src/app_alogview/GUI_IPF.cpp:588:      m_ipf_view[01;31m[Ker-[m[K>setSource(m_source);
./src/app_alogview/GUI_IPF.cpp:602:    m_ipf_view[01;31m[Ker-[m[K>setVarPlotA(mix);
./src/app_alogview/GUI_IPF.cpp:609:    m_ipf_view[01;31m[Ker-[m[K>clearVarPlotA();    
./src/app_alogview/GUI_IPF.cpp:612:  m_ipf_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_IPF.cpp:622:    m_ipf_view[01;31m[Ker-[m[K>setVarPlotB(mix);
./src/app_alogview/GUI_IPF.cpp:629:    m_ipf_view[01;31m[Ker-[m[K>clearVarPlotB();    
./src/app_alogview/GUI_IPF.cpp:632:  m_ipf_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_IPF.cpp:707:    string pwt = m_ipf_view[01;31m[Ker-[m[K>getCurrPriority(m_sources[i]);
./src/app_alogview/GUI_IPF.cpp:732:    m_fld_ipf_it[01;31m[Ker-[m[K>hide();
./src/app_alogview/GUI_IPF.cpp:747:    m_fld_ipf_it[01;31m[Ker-[m[K>show();
./src/app_alogview/GUI_IPF.cpp:802:  m_ipf_view[01;31m[Ker-[m[K>setMutableTextSize(m_mutable_text_size);
./src/app_alogview/GUI_IPF.cpp:803:  m_ipf_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_IPF.cpp:830:      m_ipf_view[01;31m[Ker-[m[K>setVarPlotA(bhv_name, mix);
./src/app_alogview/GUI_IPF.cpp:835:      m_ipf_view[01;31m[Ker-[m[K>setVarPlotB(bhv_name, mix);
./src/app_alogview/GUI_IPF.cpp:854:  if(m_view[01;31m[Ker-[m[K>getShowPieces())
./src/app_alogview/GUI_IPF.cpp:861:  double time     = m_ipf_view[01;31m[Ker-[m[K>getCurrTime();
./src/app_alogview/GUI_IPF.cpp:865:  string ipf_iter_str = m_ipf_view[01;31m[Ker-[m[K>getCurrIteration();
./src/app_alogview/GUI_IPF.cpp:866:  m_fld_ipf_it[01;31m[Ker-[m[K>value(ipf_iter_str.c_str());
./src/app_alogview/GUI_IPF.cpp:867:  string ipf_pcs_str = m_ipf_view[01;31m[Ker-[m[K>getCurrPieces();
./src/app_alogview/GUI_IPF.cpp:869:  string ipf_dom_str = m_ipf_view[01;31m[Ker-[m[K>getCurrDomain();
./src/app_alogview/GUI_IPF.cpp:872:  string labela = m_ipf_view[01;31m[Ker-[m[K>getCurrScopeVarA();
./src/app_alogview/GUI_IPF.cpp:879:  string labelb = m_ipf_view[01;31m[Ker-[m[K>getCurrScopeVarB();
./src/app_alogview/REPLAY_GUI.cpp:70:  m_mview[01;31m[Ker-[m[K>setParam("center_view", "objects");
./src/app_alogview/REPLAY_GUI.cpp:351:      lp_curr_time = lp_view[01;31m[Ker-[m[K>getCurrTime();
./src/app_alogview/REPLAY_GUI.cpp:352:      np_view[01;31m[Ker-[m[K>setCurrTime(lp_curr_time);
./src/app_alogview/REPLAY_GUI.cpp:353:      np_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/REPLAY_GUI.cpp:375:    curr_time = np_view[01;31m[Ker-[m[K>getStartTimeHint();
./src/app_alogview/REPLAY_GUI.cpp:377:  lp_view[01;31m[Ker-[m[K>setCurrTime(curr_time);
./src/app_alogview/REPLAY_GUI.cpp:378:  lp_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/REPLAY_GUI.cpp:379:  np_view[01;31m[Ker-[m[K>setCurrTime(curr_time);
./src/app_alogview/REPLAY_GUI.cpp:380:  np_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/REPLAY_GUI.cpp:389:      lp_view[01;31m[Ker-[m[K>adjustZoom("out");
./src/app_alogview/REPLAY_GUI.cpp:391:      lp_view[01;31m[Ker-[m[K>adjustZoom("in");
./src/app_alogview/REPLAY_GUI.cpp:392:    lp_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/REPLAY_GUI.cpp:397:    np_view[01;31m[Ker-[m[K>setParam("pan_y", ((double)(amt)/10)); 
./src/app_alogview/REPLAY_GUI.cpp:398:    np_view[01;31m[Ker-[m[K>setParam("center_view", "none");
./src/app_alogview/REPLAY_GUI.cpp:399:    np_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/REPLAY_GUI.cpp:415:    np_view[01;31m[Ker-[m[K>setParam("pan_x", ((double)(amt)/10)); 
./src/app_alogview/REPLAY_GUI.cpp:416:    np_view[01;31m[Ker-[m[K>setParam("center_view", "none");
./src/app_alogview/REPLAY_GUI.cpp:417:    np_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/REPLAY_GUI.cpp:427:      lp_view[01;31m[Ker-[m[K>adjustZoom("in");
./src/app_alogview/REPLAY_GUI.cpp:429:      lp_view[01;31m[Ker-[m[K>adjustZoom("out");
./src/app_alogview/REPLAY_GUI.cpp:431:      lp_view[01;31m[Ker-[m[K>adjustZoom("reset");
./src/app_alogview/REPLAY_GUI.cpp:432:    lp_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/REPLAY_GUI.cpp:438:      np_view[01;31m[Ker-[m[K>setParam("zoom", 1.03);
./src/app_alogview/REPLAY_GUI.cpp:440:      np_view[01;31m[Ker-[m[K>setParam("zoom", 1.006);
./src/app_alogview/REPLAY_GUI.cpp:442:      np_view[01;31m[Ker-[m[K>setParam("zoom", 0.9);
./src/app_alogview/REPLAY_GUI.cpp:444:      np_view[01;31m[Ker-[m[K>setParam("zoom", 0.985);
./src/app_alogview/REPLAY_GUI.cpp:446:      np_view[01;31m[Ker-[m[K>setParam("zoom", "reset");
./src/app_alogview/REPLAY_GUI.cpp:447:    np_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/REPLAY_GUI.cpp:457:  lp_view[01;31m[Ker-[m[K>toggleLeftLogPlot();
./src/app_alogview/REPLAY_GUI.cpp:458:  lp_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/REPLAY_GUI.cpp:468:  lp_view[01;31m[Ker-[m[K>toggleRightLogPlot();
./src/app_alogview/REPLAY_GUI.cpp:469:  lp_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/REPLAY_GUI.cpp:480:  int x  = np_view[01;31m[Ker-[m[K>x();
./src/app_alogview/REPLAY_GUI.cpp:481:  int y  = np_view[01;31m[Ker-[m[K>y();
./src/app_alogview/REPLAY_GUI.cpp:482:  int w  = np_view[01;31m[Ker-[m[K>w();
./src/app_alogview/REPLAY_GUI.cpp:483:  int h  = np_view[01;31m[Ker-[m[K>h();
./src/app_alogview/REPLAY_GUI.cpp:494:  int x  = lp_view[01;31m[Ker-[m[K>x();
./src/app_alogview/REPLAY_GUI.cpp:495:  int y  = lp_view[01;31m[Ker-[m[K>y();
./src/app_alogview/REPLAY_GUI.cpp:496:  int w  = lp_view[01;31m[Ker-[m[K>w();
./src/app_alogview/REPLAY_GUI.cpp:497:  int h  = lp_view[01;31m[Ker-[m[K>h();
./src/app_alogview/REPLAY_GUI.cpp:522:    np_view[01;31m[Ker-[m[K>setCurrTimeStart();
./src/app_alogview/REPLAY_GUI.cpp:524:    np_view[01;31m[Ker-[m[K>setCurrTimeEnd();      
./src/app_alogview/REPLAY_GUI.cpp:525:  np_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/REPLAY_GUI.cpp:527:  double curr_time = np_view[01;31m[Ker-[m[K>getCurrTime();
./src/app_alogview/REPLAY_GUI.cpp:528:  lp_view[01;31m[Ker-[m[K>setCurrTime(curr_time);
./src/app_alogview/REPLAY_GUI.cpp:529:  lp_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/REPLAY_GUI.cpp:542:  bool time_in_bounds = np_view[01;31m[Ker-[m[K>stepTime(dbl_val);
./src/app_alogview/REPLAY_GUI.cpp:545:    np_view[01;31m[Ker-[m[K>setStreaming(false);
./src/app_alogview/REPLAY_GUI.cpp:547:  np_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/REPLAY_GUI.cpp:549:  double curr_time = np_view[01;31m[Ker-[m[K>getCurrTime();
./src/app_alogview/REPLAY_GUI.cpp:550:  lp_view[01;31m[Ker-[m[K>setCurrTime(curr_time);
./src/app_alogview/REPLAY_GUI.cpp:551:  lp_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/REPLAY_GUI.cpp:563:    np_view[01;31m[Ker-[m[K>setStepType("seconds");
./src/app_alogview/REPLAY_GUI.cpp:565:    np_view[01;31m[Ker-[m[K>setStepType("helm_iterations");
./src/app_alogview/REPLAY_GUI.cpp:574:  lp_view[01;31m[Ker-[m[K>setLeftPlot((unsigned int)(index));
./src/app_alogview/REPLAY_GUI.cpp:575:  lp_view[01;31m[Ker-[m[K>showLeftLogPlot(true);
./src/app_alogview/REPLAY_GUI.cpp:576:  lp_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/REPLAY_GUI.cpp:586:  lp_view[01;31m[Ker-[m[K>setRightPlot((unsigned int)(index));
./src/app_alogview/REPLAY_GUI.cpp:587:  lp_view[01;31m[Ker-[m[K>showRightLogPlot(true);
./src/app_alogview/REPLAY_GUI.cpp:588:  lp_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/REPLAY_GUI.cpp:602:  double curr_time = np_view[01;31m[Ker-[m[K>getCurrTime();
./src/app_alogview/REPLAY_GUI.cpp:624:  double curr_time = np_view[01;31m[Ker-[m[K>getCurrTime();
./src/app_alogview/REPLAY_GUI.cpp:646:  double curr_time = np_view[01;31m[Ker-[m[K>getCurrTime();
./src/app_alogview/REPLAY_GUI.cpp:666:  double curr_time = np_view[01;31m[Ker-[m[K>getCurrTime();
./src/app_alogview/REPLAY_GUI.cpp:686:  double curr_time = np_view[01;31m[Ker-[m[K>getCurrTime();
./src/app_alogview/REPLAY_GUI.cpp:708:  double curr_time = np_view[01;31m[Ker-[m[K>getCurrTime();
./src/app_alogview/REPLAY_GUI.cpp:727:    lp_view[01;31m[Ker-[m[K>adjustZoom("in");
./src/app_alogview/REPLAY_GUI.cpp:729:    lp_view[01;31m[Ker-[m[K>adjustZoom("out");
./src/app_alogview/REPLAY_GUI.cpp:731:    lp_view[01;31m[Ker-[m[K>adjustZoom("reset");
./src/app_alogview/REPLAY_GUI.cpp:743:  lp_view[01;31m[Ker-[m[K>setSyncScales("toggle");
./src/app_alogview/REPLAY_GUI.cpp:756:      lp_view[01;31m[Ker-[m[K>showLeftLogPlot(true);
./src/app_alogview/REPLAY_GUI.cpp:758:      lp_view[01;31m[Ker-[m[K>showLeftLogPlot(false);
./src/app_alogview/REPLAY_GUI.cpp:762:      lp_view[01;31m[Ker-[m[K>showRightLogPlot(true);
./src/app_alogview/REPLAY_GUI.cpp:764:      lp_view[01;31m[Ker-[m[K>showRightLogPlot(false);
./src/app_alogview/REPLAY_GUI.cpp:765:    lp_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/REPLAY_GUI.cpp:770:  lp_view[01;31m[Ker-[m[K>redraw();
./src/app_alogview/REPLAY_GUI.cpp:794:  np_view[01;31m[Ker-[m[K>setStreaming(m_stream);
./src/app_alogview/REPLAY_GUI.cpp:909:  double ctime = np_view[01;31m[Ker-[m[K>getCurrTime();
./src/app_alogview/REPLAY_GUI.cpp:920:  string label_str1 = lp_view[01;31m[Ker-[m[K>getFullVar1();
./src/app_alogview/REPLAY_GUI.cpp:924:  double curr_val1 = lp_view[01;31m[Ker-[m[K>get_curr_val1(ctime);
./src/app_alogview/REPLAY_GUI.cpp:931:  string label_str2 = lp_view[01;31m[Ker-[m[K>getFullVar2();
./src/app_alogview/REPLAY_GUI.cpp:935:  double curr_val2 = lp_view[01;31m[Ker-[m[K>get_curr_val2(ctime);
./src/app_alogview/REPLAY_GUI.cpp:965:    np_view[01;31m[Ker-[m[K>setDataBroker(broker);
./src/app_alogview/REPLAY_GUI.cpp:966:    np_view[01;31m[Ker-[m[K>initPlots();
./src/app_alogview/REPLAY_GUI.cpp:970:    lp_view[01;31m[Ker-[m[K>setDataBroker(broker);
./src/app_alogview/REPLAY_GUI.cpp:1220:  double curr_time = np_view[01;31m[Ker-[m[K>getCurrTime();
./src/app_alogview/REPLAY_GUI.cpp:1349:  m_mview[01;31m[Ker-[m[K>resize(xpos, ypos, xwid, yhgt);
./src/app_alogview/REPLAY_GUI.cpp:1359:  lp_view[01;31m[Ker-[m[K>resize(0, dy+wh, w(), dh-wh);
./src/app_alogview/GUI_Encounters.cpp:98:  m_eview[01;31m[Ker-[m[K>setClearColor("0.95,0.95,0.95");
./src/app_alogview/GUI_Encounters.cpp:99:  m_eview[01;31m[Ker-[m[K>setOwningGUI(this);
./src/app_alogview/GUI_Encounters.cpp:173:    m_eview[01;31m[Ker-[m[K>EncounterViewer::resize(0, 0, w(), h());
./src/app_alogview/GUI_Encounters.cpp:175:    m_eview[01;31m[Ker-[m[K>EncounterViewer::resize(0, 0+100, w(), h()-100);
./src/app_alogview/GUI_Encounters.cpp:386:  m_eview[01;31m[Ker-[m[K>setDataBroker(m_dbroker, vname);
./src/app_alogview/GUI_Encounters.cpp:423:      m_eview[01;31m[Ker-[m[K>setShowAllPts(!drawing_on);
./src/app_alogview/GUI_Encounters.cpp:424:      m_eview[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_Encounters.cpp:429:      m_eview[01;31m[Ker-[m[K>setDrawMinCPA(!draw_mincpa);
./src/app_alogview/GUI_Encounters.cpp:432:      m_eview[01;31m[Ker-[m[K>setDrawAvgCPA(!draw_avgcpa);
./src/app_alogview/GUI_Encounters.cpp:435:      m_eview[01;31m[Ker-[m[K>setDrawMinEff(!draw_mineff);
./src/app_alogview/GUI_Encounters.cpp:438:      m_eview[01;31m[Ker-[m[K>setDrawAvgEff(!draw_avgeff);
./src/app_alogview/GUI_Encounters.cpp:439:      m_eview[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_Encounters.cpp:442:      m_eview[01;31m[Ker-[m[K>setDrawPointSize("smaller");
./src/app_alogview/GUI_Encounters.cpp:443:      m_eview[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_Encounters.cpp:446:      m_eview[01;31m[Ker-[m[K>setDrawPointSize("bigger");
./src/app_alogview/GUI_Encounters.cpp:447:      m_eview[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_Encounters.cpp:479:  m_eview[01;31m[Ker-[m[K>setTime(curr_time);
./src/app_alogview/GUI_Encounters.cpp:480:  m_eview[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_Encounters.cpp:516:  m_eview[01;31m[Ker-[m[K>setShowAllPts(drawing_on);
./src/app_alogview/GUI_Encounters.cpp:517:  m_eview[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_Encounters.cpp:526:  m_eview[01;31m[Ker-[m[K>setDrawMinEff(drawing_on);
./src/app_alogview/GUI_Encounters.cpp:527:  m_eview[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_Encounters.cpp:536:  m_eview[01;31m[Ker-[m[K>setDrawAvgEff(drawing_on);
./src/app_alogview/GUI_Encounters.cpp:537:  m_eview[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_Encounters.cpp:547:  m_eview[01;31m[Ker-[m[K>setDrawMinCPA(drawing_on);
./src/app_alogview/GUI_Encounters.cpp:548:  m_eview[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_Encounters.cpp:557:  m_eview[01;31m[Ker-[m[K>setDrawAvgCPA(drawing_on);
./src/app_alogview/GUI_Encounters.cpp:558:  m_eview[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_Encounters.cpp:566:  double go_time = m_eview[01;31m[Ker-[m[K>getCurrIndexTime();
./src/app_alogview/GUI_Encounters.cpp:567:  m_eview[01;31m[Ker-[m[K>setTime(go_time);
./src/app_alogview/GUI_Encounters.cpp:572:  m_eview[01;31m[Ker-[m[K>redraw();
./src/app_alogview/GUI_Encounters.cpp:637:  double time     = m_eview[01;31m[Ker-[m[K>getCurrTime();
./src/app_alogview/GUI_Encounters.cpp:641:  unsigned int total_encounters = m_eview[01;31m[Ker-[m[K>getTotalEncounters();
./src/app_alogview/GUI_Encounters.cpp:642:  unsigned int curr_encounter = m_eview[01;31m[Ker-[m[K>getCurrEncounter();
./src/app_alogview/GUI_Encounters.cpp:648:  double min_cpa = m_eview[01;31m[Ker-[m[K>getMinCPA();
./src/app_alogview/GUI_Encounters.cpp:652:  double min_eff = m_eview[01;31m[Ker-[m[K>getMinEFF();
./src/app_alogview/GUI_Encounters.cpp:656:  double avg_cpa = m_eview[01;31m[Ker-[m[K>getAvgCPA();
./src/app_alogview/GUI_Encounters.cpp:660:  double avg_eff = m_eview[01;31m[Ker-[m[K>getAvgEFF();
./src/app_alogview/GUI_Encounters.cpp:664:  double collision_range = m_eview[01;31m[Ker-[m[K>getCollisionRange();
./src/app_alogview/GUI_Encounters.cpp:668:  double near_miss_range = m_eview[01;31m[Ker-[m[K>getNearMissRange();
./src/app_alogview/GUI_Encounters.cpp:672:  double encounter_range = m_eview[01;31m[Ker-[m[K>getEncounterRange();
./src/app_alogview/GUI_Encounters.cpp:677:  int curr_id = m_eview[01;31m[Ker-[m[K>getCurrIndexID();
./src/app_alogview/GUI_Encounters.cpp:681:  double curr_time = m_eview[01;31m[Ker-[m[K>getCurrIndexTime();
./src/app_alogview/GUI_Encounters.cpp:685:  double curr_cpa = m_eview[01;31m[Ker-[m[K>getCurrIndexCPA();
./src/app_alogview/GUI_Encounters.cpp:689:  double curr_eff = m_eview[01;31m[Ker-[m[K>getCurrIndexEFF();
./src/app_alogview/GUI_Encounters.cpp:693:  string curr_contact = m_eview[01;31m[Ker-[m[K>getCurrIndexContact();
./src/uPlotViewer/UPV_GUI.cpp:98://            between sub-widgets. We ov[01;31m[Ker-[m[Kride that here to do the 
./src/uPlotViewer/UPV_GUI.cpp:140:  m_plot_view[01;31m[Ker-[m[K>setHotVar(varname);
./src/uPlotViewer/UPV_GUI.cpp:163:      bool done = m_plot_view[01;31m[Ker-[m[K>hideVar(varname);
./src/uPlotViewer/UPV_GUI.cpp:168:      m_plot_view[01;31m[Ker-[m[K>showVar(varname);
./src/uPlotViewer/UPV_GUI.cpp:169:    m_plot_view[01;31m[Ker-[m[K>redraw();
./src/uPlotViewer/UPV_GUI.cpp:182:  m_plot_view[01;31m[Ker-[m[K>setHotVar(varname);
./src/uPlotViewer/UPV_GUI.cpp:187:    m_plot_view[01;31m[Ker-[m[K>showVar(varname);
./src/uPlotViewer/UPV_GUI.cpp:191:  m_plot_view[01;31m[Ker-[m[K>redraw();
./src/uPlotViewer/UPV_GUI.cpp:200:    m_plot_view[01;31m[Ker-[m[K>setParam("gridsize", "reset");
./src/uPlotViewer/UPV_GUI.cpp:202:    m_plot_view[01;31m[Ker-[m[K>setParam("gridsize", "down");
./src/uPlotViewer/UPV_GUI.cpp:204:    m_plot_view[01;31m[Ker-[m[K>setParam("gridsize", "up");
./src/uPlotViewer/UPV_GUI.cpp:206:  m_plot_view[01;31m[Ker-[m[K>redraw();
./src/uPlotViewer/UPV_GUI.cpp:215:    m_plot_view[01;31m[Ker-[m[K>setParam("gridshade", "reset");
./src/uPlotViewer/UPV_GUI.cpp:217:    m_plot_view[01;31m[Ker-[m[K>setParam("gridshade", "down");
./src/uPlotViewer/UPV_GUI.cpp:219:    m_plot_view[01;31m[Ker-[m[K>setParam("gridshade", "up");
./src/uPlotViewer/UPV_GUI.cpp:221:  m_plot_view[01;31m[Ker-[m[K>redraw();
./src/uPlotViewer/UPV_GUI.cpp:230:    m_plot_view[01;31m[Ker-[m[K>setParam("lineshade", "reset");
./src/uPlotViewer/UPV_GUI.cpp:232:    m_plot_view[01;31m[Ker-[m[K>setParam("lineshade", "down");
./src/uPlotViewer/UPV_GUI.cpp:234:    m_plot_view[01;31m[Ker-[m[K>setParam("lineshade", "up");
./src/uPlotViewer/UPV_GUI.cpp:236:  m_plot_view[01;31m[Ker-[m[K>redraw();
./src/uPlotViewer/UPV_GUI.cpp:245:    m_plot_view[01;31m[Ker-[m[K>setParam("backshade", "reset");
./src/uPlotViewer/UPV_GUI.cpp:247:    m_plot_view[01;31m[Ker-[m[K>setParam("backshade", "down");
./src/uPlotViewer/UPV_GUI.cpp:249:    m_plot_view[01;31m[Ker-[m[K>setParam("backshade", "up");
./src/uPlotViewer/UPV_GUI.cpp:251:  m_plot_view[01;31m[Ker-[m[K>redraw();
./src/uPlotViewer/UPV_GUI.cpp:260:  string str = m_plot_view[01;31m[Ker-[m[K>getHotVar();
./src/uPlotViewer/UPV_GUI.cpp:263:  double val  = m_plot_view[01;31m[Ker-[m[K>getHotVarAvg();
./src/lib_mbutil/VarDataPairUtils.cpp:54:  // VarData Pairs tied to int[01;31m[Ker-[m[Kvehicle ranges in the
./src/app_bhv2graphviz/bhv2graphviz.cpp:27:  m_ivp_domain.addDomain("placehold[01;31m[Ker-[m[Kdomain", 0, 100, 100);
./src/app_zaic_spd/ZAIC_SPD_GUI.cpp:61:  m_zaic_view[01;31m[Ker-[m[K>setModel(m_zaic_model);
./src/app_zaic_spd/ZAIC_SPD_GUI.cpp:145:  m_zaic_view[01;31m[Ker-[m[K>redraw();
./src/uFldNodeBroker/NodeBroker.cpp:474:  // Set up the us[01;31m[Ker-[m[Kconfigured variable bridges.
./src/app_ffview/FFV_GUI.cpp:62:    return(m_ffv_view[01;31m[Ker-[m[K>setParam(param, value));
./src/app_ffview/FFV_GUI.cpp:72:    return(m_ffv_view[01;31m[Ker-[m[K>setParam(param, value));
./src/app_ffview/FFV_GUI.cpp:81:  m_ffv_view[01;31m[Ker-[m[K>resize(0, 30, w(), h()-125);
./src/app_ffview/FFV_GUI.cpp:336:  m_menubar->add("Directed-Refine/Small[01;31m[Ker-[m[KUniform-Refine", '[',
./src/app_ffview/FFV_GUI.cpp:338:  m_menubar->add("Directed-Refine/Larg[01;31m[Ker-[m[KUniform-Refine",  ']',
./src/app_ffview/FFV_GUI.cpp:457://            between sub-widgets. We ov[01;31m[Ker-[m[Kride that here to do the 
./src/app_ffview/FFV_GUI.cpp:492:  m_ffv_view[01;31m[Ker-[m[K>setParam("mod_base_aof", amt);
./src/app_ffview/FFV_GUI.cpp:501:  m_ffv_view[01;31m[Ker-[m[K>modPatchAOF(amt);
./src/app_ffview/FFV_GUI.cpp:509:  m_ffv_view[01;31m[Ker-[m[K>setParam("mod_uniform_piece", amt);
./src/app_ffview/FFV_GUI.cpp:510:  m_ffv_view[01;31m[Ker-[m[K>makeUniformIPF();
./src/app_ffview/FFV_GUI.cpp:519:  m_ffv_view[01;31m[Ker-[m[K>takeSamples(amt);
./src/app_ffview/FFV_GUI.cpp:528:  m_ffv_view[01;31m[Ker-[m[K>makeUniformIPFxN(amt);
./src/app_ffview/FFV_GUI.cpp:537:  m_ffv_view[01;31m[Ker-[m[K>toggleAOF();
./src/app_ffview/FFV_GUI.cpp:545:  m_ffv_view[01;31m[Ker-[m[K>toggleIPF();
./src/app_ffview/FFV_GUI.cpp:553:  m_ffv_view[01;31m[Ker-[m[K>setParam("directed_refine", "toggle");
./src/app_ffview/FFV_GUI.cpp:554:  m_ffv_view[01;31m[Ker-[m[K>makeUniformIPF();
./src/app_ffview/FFV_GUI.cpp:563:  m_ffv_view[01;31m[Ker-[m[K>toggleSmartAug();
./src/app_ffview/FFV_GUI.cpp:572:  m_ffv_view[01;31m[Ker-[m[K>setParam("auto_peak", "toggle");
./src/app_ffview/FFV_GUI.cpp:573:  m_ffv_view[01;31m[Ker-[m[K>makeUniformIPF();
./src/app_ffview/FFV_GUI.cpp:582:  m_ffv_view[01;31m[Ker-[m[K>setParam("smart_amount",  amt);
./src/app_ffview/FFV_GUI.cpp:583:  m_ffv_view[01;31m[Ker-[m[K>setParam("smart_percent", 0);
./src/app_ffview/FFV_GUI.cpp:584:  m_ffv_view[01;31m[Ker-[m[K>makeUniformIPF();
./src/app_ffview/FFV_GUI.cpp:593:  m_ffv_view[01;31m[Ker-[m[K>setParam("smart_amount",  0);
./src/app_ffview/FFV_GUI.cpp:594:  m_ffv_view[01;31m[Ker-[m[K>setParam("smart_percent", amt);
./src/app_ffview/FFV_GUI.cpp:595:  m_ffv_view[01;31m[Ker-[m[K>makeUniformIPF();
./src/app_ffview/FFV_GUI.cpp:604:  m_ffv_view[01;31m[Ker-[m[K>setParam("strict_range", "toggle");
./src/app_ffview/FFV_GUI.cpp:605:  m_ffv_view[01;31m[Ker-[m[K>makeUniformIPF();
./src/app_ffview/FFV_GUI.cpp:615:    m_ffv_view[01;31m[Ker-[m[K>setParam("uniform_piece", amt);
./src/app_ffview/FFV_GUI.cpp:616:  m_ffv_view[01;31m[Ker-[m[K>makeUniformIPF();
./src/app_ffview/FFV_GUI.cpp:626:    m_ffv_view[01;31m[Ker-[m[K>setParam("uniform_amount", amt);
./src/app_ffview/FFV_GUI.cpp:627:  m_ffv_view[01;31m[Ker-[m[K>makeUniformIPF();
./src/app_ffview/FFV_GUI.cpp:636:  m_ffv_view[01;31m[Ker-[m[K>printParams();
./src/app_ffview/FFV_GUI.cpp:650:  str = intToString((int)(m_ffv_view[01;31m[Ker-[m[K>getParam("sample_count", ok)));
./src/app_ffview/FFV_GUI.cpp:655:  str = doubleToString(m_ffv_view[01;31m[Ker-[m[K>getParam("worst_err", ok),4);
./src/app_ffview/FFV_GUI.cpp:660:  str = intToString((int)(m_ffv_view[01;31m[Ker-[m[K>getParam("piece_count", ok)));
./src/app_ffview/FFV_GUI.cpp:666:  str = doubleToString(m_ffv_view[01;31m[Ker-[m[K>getParam("avg_err", ok),4);
./src/app_ffview/FFV_GUI.cpp:671:  str = doubleToString(m_ffv_view[01;31m[Ker-[m[K>getParam("squared_err", ok),4);
./src/app_ffview/FFV_GUI.cpp:676:  str = intToString((int)(m_ffv_view[01;31m[Ker-[m[K>getParam("unif_aug_size", ok)));
./src/app_ffview/FFV_GUI.cpp:682:  str = doubleToString(m_ffv_view[01;31m[Ker-[m[K>getParam("sample_high", ok),4);
./src/app_ffview/FFV_GUI.cpp:687:  str = doubleToString(m_ffv_view[01;31m[Ker-[m[K>getParam("sample_low", ok),4);
./src/app_ffview/FFV_GUI.cpp:692:  str = doubleToString(m_ffv_view[01;31m[Ker-[m[K>getParam("create_time", ok), 3);
./src/app_ffview/FFV_GUI.cpp:699:  str = m_ffv_view[01;31m[Ker-[m[K>getParam("uniform_piece");
./src/app_ffview/FFV_GUI.cpp:702:  str = m_ffv_view[01;31m[Ker-[m[K>getParam("refine_region");
./src/app_ffview/FFV_GUI.cpp:705:  str = m_ffv_view[01;31m[Ker-[m[K>getParam("reflector_errors");
./src/app_ffview/FFV_GUI.cpp:709:  str = m_ffv_view[01;31m[Ker-[m[K>getParam("auto_peak");
./src/app_ffview/FFV_GUI.cpp:712:  str = m_ffv_view[01;31m[Ker-[m[K>getParam("refine_piece");
./src/app_ffview/FFV_GUI.cpp:722:    m_ffv_view[01;31m[Ker-[m[K>setParam("refine_piece", i_refine_pce_str->value());
./src/app_ffview/main.cpp:102:  // Now Handle command-line ov[01;31m[Ker-[m[Krides of parameter default values or
./src/uFldScope/UFS_Info.cpp:40:  blk("  us[01;31m[Ker-[m[Kconfigured set of incoming reports and parses out key    ");
./src/uFldScope/UFS_Info.cpp:42:  blk("  report in the form of comma-separated paramet[01;31m[Ker-[m[Kvalue pairs.  ");
./src/lib_geometry/ArtifactUtils.cpp:42://     should be clockwise or count[01;31m[Ker-[m[Kclockwise.
./src/lib_geometry/CurrentField.cpp:595://   Purpose: Apply all us[01;31m[Ker-[m[Kspecified render hints to all vectors
./src/pAutoPoke/AutoPoke_Info.cpp:23:  blk("pAutoPoke is a thin MOOS app for poking the MOOSDB with a us[01;31m[Ker-[m[K ");
./src/pMarineViewer/PMV_Info.cpp:43:  blk("  messages to the MOOSDB based on us[01;31m[Ker-[m[Kconfigured keyboard or   ");
./src/pMarineViewer/PMV_GUI.cpp:621:    m_mview[01;31m[Ker-[m[K>setVerbose(bval);
./src/pMarineViewer/PMV_GUI.cpp:915:  string vname = mview[01;31m[Ker-[m[K>getStringInfo("active_vehicle_name");
./src/pMarineViewer/PMV_GUI.cpp:943:    mview[01;31m[Ker-[m[K>setParam("active_vehicle_name", curr_node);
./src/pMarineViewer/PMV_GUI.cpp:953:  mview[01;31m[Ker-[m[K>clearGeoShapes(vname, shape, stype);
./src/pMarineViewer/PMV_GUI.cpp:967:  string scope_var  = mview[01;31m[Ker-[m[K>getStringInfo("scope_var");
./src/pMarineViewer/PMV_GUI.cpp:968:  string scope_time = mview[01;31m[Ker-[m[K>getStringInfo("scope_time");
./src/pMarineViewer/PMV_GUI.cpp:969:  string scope_val  = mview[01;31m[Ker-[m[K>getStringInfo("scope_val");
./src/pMarineViewer/PMV_GUI.cpp:970:  string vname = mview[01;31m[Ker-[m[K>getStringInfo("active_vehicle_name");
./src/pMarineViewer/PMV_GUI.cpp:993:  string vtype = mview[01;31m[Ker-[m[K>getStringInfo("body");
./src/pMarineViewer/PMV_GUI.cpp:994:  string xpos = mview[01;31m[Ker-[m[K>getStringInfo("xpos", 1);
./src/pMarineViewer/PMV_GUI.cpp:995:  string ypos = mview[01;31m[Ker-[m[K>getStringInfo("ypos", 1);
./src/pMarineViewer/PMV_GUI.cpp:996:  string lat = mview[01;31m[Ker-[m[K>getStringInfo("lat", 6);
./src/pMarineViewer/PMV_GUI.cpp:997:  string lon = mview[01;31m[Ker-[m[K>getStringInfo("lon", 6);
./src/pMarineViewer/PMV_GUI.cpp:998:  string spd = mview[01;31m[Ker-[m[K>getStringInfo("speed", 1);
./src/pMarineViewer/PMV_GUI.cpp:999:  string crs = mview[01;31m[Ker-[m[K>getStringInfo("course", 1);
./src/pMarineViewer/PMV_GUI.cpp:1000:  string dep = mview[01;31m[Ker-[m[K>getStringInfo("depth", 1);
./src/pMarineViewer/PMV_GUI.cpp:1001:  string age_ais = mview[01;31m[Ker-[m[K>getStringInfo("age_ais", 2);
./src/pMarineViewer/PMV_GUI.cpp:1146:	  mview[01;31m[Ker-[m[K>addScopeVariable(new_var);
./src/pMarineViewer/PMV_GUI.cpp:1149:	if(mview[01;31m[Ker-[m[K>isScopeVariable(new_var))
./src/pMarineViewer/PMV_GUI.cpp:1150:	  mview[01;31m[Ker-[m[K>setActiveScope(new_var);
./src/pMarineViewer/PMV_GUI.cpp:1160:  mview[01;31m[Ker-[m[K>setActiveScope(varname);
./src/pMarineViewer/PMV_GUI.cpp:1317:  mview[01;31m[Ker-[m[K>setLeftMouseKey(key_str);
./src/pMarineViewer/PMV_GUI.cpp:1329:  mview[01;31m[Ker-[m[K>setRightMouseKey(key_str);
./src/pMarineViewer/PMV_GUI.cpp:1341:  mview[01;31m[Ker-[m[K>setParam("reference_tag", str);
./src/pMarineViewer/PMV_GUI.cpp:1353:    mview[01;31m[Ker-[m[K>setParam("filter_out_tag", "all");
./src/pMarineViewer/PMV_GUI.cpp:1356:    mview[01;31m[Ker-[m[K>setParam("filter_out_tag", str);
./src/pMarineViewer/PMV_GUI.cpp:1377:    mview[01;31m[Ker-[m[K>setParam("filter_out_tag", active_node);
./src/pMarineViewer/PMV_GUI.cpp:1437:  double stale_report_thresh = mview[01;31m[Ker-[m[K>getStaleReportThresh();
./src/pMarineViewer/PMV_GUI.cpp:1438:  double stale_remove_thresh = mview[01;31m[Ker-[m[K>getStaleRemoveThresh();
./src/pMarineViewer/PMV_GUI.cpp:1447:  vector<string> vnames = mview[01;31m[Ker-[m[K>getStaleVehicles(total_thresh);
./src/pMarineViewer/PMV_GUI.cpp:1450:    mview[01;31m[Ker-[m[K>setParam("filter_out_tag", vnames[i]);
./src/pMarineViewer/PMV_GUI.cpp:1745:    mview[01;31m[Ker-[m[K>addMousePoke(side, key, vardata_pair);
./src/pMarineViewer/PMV_GUI.cpp:1760:	mview[01;31m[Ker-[m[K>setLeftMouseKey(key);
./src/pMarineViewer/PMV_GUI.cpp:1773:    mview[01;31m[Ker-[m[K>addMousePoke(side, key, vardata_pair);
./src/pMarineViewer/PMV_GUI.cpp:1787:	mview[01;31m[Ker-[m[K>setRightMouseKey(key);
./src/pMarineViewer/PMV_GUI.cpp:2036:  double stale_thresh = mview[01;31m[Ker-[m[K>getStaleReportThresh();
./src/pMarineViewer/PMV_GUI.cpp:2037:  vector<string> stale_names = mview[01;31m[Ker-[m[K>getStaleVehicles(stale_thresh);
./src/pMarineViewer/PMV_GUI.cpp:3191:  mview[01;31m[Ker-[m[K>resize(xpos, ypos, xwid, yhgt);
./src/pMarineViewer/PMV_MOOSApp.cpp:138:  m_gui->mview[01;31m[Ker-[m[K>updateMOOSGeodesy();
./src/pMarineViewer/PMV_MOOSApp.cpp:147:  // m_gui->mview[01;31m[Ker-[m[K>autoZoom();
./src/pMarineViewer/PMV_MOOSApp.cpp:190:  if(m_gui && !m_gui->mview[01;31m[Ker-[m[K>initGeodesy(lat, lon))
./src/pMarineViewer/PMV_MOOSApp.cpp:196:    m_gui->mview[01;31m[Ker-[m[K>setParam("datum", datum);
./src/pMarineViewer/PMV_MOOSApp.cpp:284:      string vname = m_gui->mview[01;31m[Ker-[m[K>getStringInfo("active_vehicle_name");
./src/pMarineViewer/PMV_MOOSApp.cpp:330:  m_gui->mview[01;31m[Ker-[m[K>setParam("curr_time", e.moos_time);
./src/pMarineViewer/PMV_MOOSApp.cpp:363:      handled = m_gui->mview[01;31m[Ker-[m[K>handleNodeReport(sval, why_not);
./src/pMarineViewer/PMV_MOOSApp.cpp:415:	m_gui->mview[01;31m[Ker-[m[K>updateScopeVariable(key, sval, mtime, source);
./src/pMarineViewer/PMV_MOOSApp.cpp:451:      handled = m_gui->mview[01;31m[Ker-[m[K>addGeoShape(key, sval, community, MOOSTime());
./src/pMarineViewer/PMV_MOOSApp.cpp:453:      handled = m_gui->mview[01;31m[Ker-[m[K>setParam(key, sval);
./src/pMarineViewer/PMV_MOOSApp.cpp:534:    m_gui->mview[01;31m[Ker-[m[K>PMV_Viewer::draw();
./src/pMarineViewer/PMV_MOOSApp.cpp:535:    m_gui->mview[01;31m[Ker-[m[K>redraw();
./src/pMarineViewer/PMV_MOOSApp.cpp:562:  m_gui->mview[01;31m[Ker-[m[K>setParam("curr_time", e.moos_time);
./src/pMarineViewer/PMV_MOOSApp.cpp:577:  string vname = m_gui->mview[01;31m[Ker-[m[K>getStringInfo("active_vehicle_name");
./src/pMarineViewer/PMV_MOOSApp.cpp:579:  vector<VarDataPair> left_pairs = m_gui->mview[01;31m[Ker-[m[K>getLeftMousePairs();
./src/pMarineViewer/PMV_MOOSApp.cpp:590:  vector<VarDataPair> right_pairs = m_gui->mview[01;31m[Ker-[m[K>getRightMousePairs();
./src/pMarineViewer/PMV_MOOSApp.cpp:601:  vector<VarDataPair> non_mouse_pairs = m_gui->mview[01;31m[Ker-[m[K>getNonMousePairs();
./src/pMarineViewer/PMV_MOOSApp.cpp:892:      handled = m_gui->mview[01;31m[Ker-[m[K>setParam(param, value);
./src/pMarineViewer/PMV_MOOSApp.cpp:894:      handled = m_gui->mview[01;31m[Ker-[m[K>setParam(param, value);
./src/pMarineViewer/PMV_MOOSApp.cpp:922:      handled = m_gui->mview[01;31m[Ker-[m[K>handleNoTiff();
./src/pMarineViewer/PMV_MOOSApp.cpp:924:      handled = m_gui->mview[01;31m[Ker-[m[K>setParam(param, value);
./src/pMarineViewer/PMV_MOOSApp.cpp:926:      handled = m_gui->mview[01;31m[Ker-[m[K>setParam(param, value);
./src/pMarineViewer/PMV_MOOSApp.cpp:954:	bool ok = m_gui->mview[01;31m[Ker-[m[K>addScopeVariable(new_var);
./src/pMarineViewer/PMV_MOOSApp.cpp:963:      handled = m_gui->mview[01;31m[Ker-[m[K>setParam(param, value);
./src/pMarineViewer/PMV_MOOSApp.cpp:965:        handled = m_gui->mview[01;31m[Ker-[m[K>setParam(param, atof(value.c_str()));
./src/pMarineViewer/PMV_MOOSApp.cpp:973:  if(m_gui->mview[01;31m[Ker-[m[K>getTiffFileCount() == 0)
./src/pMarineViewer/PMV_MOOSApp.cpp:974:    m_gui->mview[01;31m[Ker-[m[K>setParam("tiff_file", "Default.tif");
./src/pMarineViewer/PMV_MOOSApp.cpp:982:  m_gui->mview[01;31m[Ker-[m[K>setConfigComplete();
./src/pMarineViewer/PMV_MOOSApp.cpp:985:    vector<string> tiff_files = m_gui->mview[01;31m[Ker-[m[K>getTiffFiles();
./src/pMarineViewer/PMV_MOOSApp.cpp:1000:  m_gui->mview[01;31m[Ker-[m[K>setParam("time_warp", m_time_warp);
./src/pMarineViewer/PMV_MOOSApp.cpp:1001:  m_gui->mview[01;31m[Ker-[m[K>redraw();
./src/pMarineViewer/PMV_MOOSApp.cpp:1007:  vector<string> tiff_files = m_gui->mview[01;31m[Ker-[m[K>getTiffFiles();
./src/pMarineViewer/PMV_MOOSApp.cpp:1015:  m_region_info += ", zoom=" + doubleToStringX(m_gui->mview[01;31m[Ker-[m[K>getZoom(),2);
./src/pMarineViewer/PMV_MOOSApp.cpp:1016:  m_region_info += ", pan_x=" + doubleToStringX(m_gui->mview[01;31m[Ker-[m[K>getPanX(),2);
./src/pMarineViewer/PMV_MOOSApp.cpp:1017:  m_region_info += ", pan_y=" + doubleToStringX(m_gui->mview[01;31m[Ker-[m[K>getPanY(),2);
./src/pMarineViewer/PMV_MOOSApp.cpp:1148:    //m_gui->mview[01;31m[Ker-[m[K>setCenterView(dx, dy);
./src/pMarineViewer/PMV_MOOSApp.cpp:1149:    m_gui->mview[01;31m[Ker-[m[K>setAutoZoom(dx, dy);
./src/pMarineViewer/PMV_MOOSApp.cpp:1152:    m_gui->mview[01;31m[Ker-[m[K>setCenterView(vname);
./src/pMarineViewer/PMV_MOOSApp.cpp:1156:    m_gui->mview[01;31m[Ker-[m[K>setZoom(dzoom);
./src/pMarineViewer/PMV_MOOSApp.cpp:1388:  vector<string> tiff_files = m_gui->mview[01;31m[Ker-[m[K>getTiffFiles();
./src/pMarineViewer/PMV_MOOSApp.cpp:1394:  string curr_tiff_file = m_gui->mview[01;31m[Ker-[m[K>getTiffFileCurrent();
./src/pMarineViewer/PMV_MOOSApp.cpp:1420:  m_msgs << "Total GeoShapes:   " << m_gui->mview[01;31m[Ker-[m[K>shapeCount("total_shapes") << endl;
./src/pMarineViewer/PMV_MOOSApp.cpp:1437:  unsigned int drawcount = m_gui->mview[01;31m[Ker-[m[K>getDrawCount();
./src/pMarineViewer/PMV_MOOSApp.cpp:1445:  double curr_time = m_gui->mview[01;31m[Ker-[m[K>getCurrTime();
./src/pMarineViewer/PMV_MOOSApp.cpp:1448:  double time_warp = m_gui->mview[01;31m[Ker-[m[K>getTimeWarp();
./src/pMarineViewer/PMV_MOOSApp.cpp:1451:  double srep_thresh = m_gui->mview[01;31m[Ker-[m[K>getStaleReportThresh();
./src/pMarineViewer/PMV_MOOSApp.cpp:1454:  double srem_thresh = m_gui->mview[01;31m[Ker-[m[K>getStaleRemoveThresh();
./src/pMarineViewer/PMV_MOOSApp.cpp:1457:  double elapsed = m_gui->mview[01;31m[Ker-[m[K>getElapsed();
./src/pMarineViewer/PMV_MOOSApp.cpp:1469:  double vzoom_dbl = m_gui->mview[01;31m[Ker-[m[K>getVehiclesShapeScale();
./src/lib_behaviors/IvPBehavior.cpp:333:    double curr_time = m_info_buff[01;31m[Ker-[m[K>getCurrTime();
./src/lib_behaviors/IvPBehavior.cpp:939:    string s_result = m_info_buff[01;31m[Ker-[m[K>sQuery(varname, ok_s);
./src/lib_behaviors/IvPBehavior.cpp:940:    double d_result = m_info_buff[01;31m[Ker-[m[K>dQuery(varname, ok_d);
./src/lib_behaviors/IvPBehavior.cpp:974:  string s_result = m_info_buff[01;31m[Ker-[m[K>sQuery(varname, ok_s);
./src/lib_behaviors/IvPBehavior.cpp:975:  double d_result = m_info_buff[01;31m[Ker-[m[K>dQuery(varname, ok_d);
./src/lib_behaviors/IvPBehavior.cpp:991:  double curr_reset_timestamp = m_info_buff[01;31m[Ker-[m[K>tQuery(varname, false);
./src/lib_behaviors/IvPBehavior.cpp:1014:  string result = m_info_buff[01;31m[Ker-[m[K>sQuery("COMMS_POLICY", ok);
./src/lib_behaviors/IvPBehavior.cpp:1107:    double itime = m_info_buff[01;31m[Ker-[m[K>tQuery(var);
./src/lib_behaviors/IvPBehavior.cpp:1263:  double curr_time = m_info_buff[01;31m[Ker-[m[K>getCurrTime();
./src/lib_behaviors/IvPBehavior.cpp:1317:    double curr_time = m_info_buff[01;31m[Ker-[m[K>getCurrTime();
./src/lib_behaviors/IvPBehavior.cpp:1348:  double curr_time = m_info_buff[01;31m[Ker-[m[K>getCurrTime();
./src/lib_behaviors/IvPBehavior.cpp:1476:	string s_result = m_info_buff[01;31m[Ker-[m[K>sQuery(varname, ok_s);
./src/lib_behaviors/IvPBehavior.cpp:1477:	double d_result = m_info_buff[01;31m[Ker-[m[K>dQuery(varname, ok_d);
./src/lib_behaviors/IvPBehavior.cpp:1577:  return(m_info_buff[01;31m[Ker-[m[K>getCurrTime());
./src/lib_behaviors/IvPBehavior.cpp:1588:  return(m_info_buff[01;31m[Ker-[m[K>getLocalTime());
./src/lib_behaviors/IvPBehavior.cpp:1605:  return(m_info_buff[01;31m[Ker-[m[K>tQuery(varname));
./src/lib_behaviors/IvPBehavior.cpp:1620:  if(!m_info_buff[01;31m[Ker-[m[K>isKnown(varname))
./src/lib_behaviors/IvPBehavior.cpp:1623:  double elapsed = m_info_buff[01;31m[Ker-[m[K>tQuery(varname);
./src/lib_behaviors/IvPBehavior.cpp:1639:  return(m_info_buff[01;31m[Ker-[m[K>isKnown(varname));
./src/lib_behaviors/IvPBehavior.cpp:1649:  return(m_info_buff[01;31m[Ker-[m[K>mtQuery(varname));
./src/lib_behaviors/IvPBehavior.cpp:1671:  double value = m_info_buff[01;31m[Ker-[m[K>dQuery(varname, ok);
./src/lib_behaviors/IvPBehavior.cpp:1674:    string sval = m_info_buff[01;31m[Ker-[m[K>sQuery(varname, result);
./src/lib_behaviors/IvPBehavior.cpp:1706:  string value = m_info_buff[01;31m[Ker-[m[K>sQuery(varname, ok);
./src/lib_behaviors/IvPBehavior.cpp:1709:    double dval = m_info_buff[01;31m[Ker-[m[K>dQuery(varname, result);
./src/lib_behaviors/IvPBehavior.cpp:1741:  string value = m_info_buff[01;31m[Ker-[m[K>sQuery(varname, ok);
./src/lib_behaviors/IvPBehavior.cpp:1744:    double dval = m_info_buff[01;31m[Ker-[m[K>dQuery(varname, result);
./src/lib_behaviors/IvPBehavior.cpp:1766:  return(m_info_buff[01;31m[Ker-[m[K>dQueryDeltas(varname, ok));
./src/lib_behaviors/IvPBehavior.cpp:1779:  return(m_info_buff[01;31m[Ker-[m[K>sQueryDeltas(varname, ok));
./src/lib_behaviors/IvPBehavior.cpp:1949:  if(!m_ledger || !m_ledg[01;31m[Ker-[m[K>hasVName(vname)) {
./src/lib_behaviors/IvPBehavior.cpp:1956:    return(m_ledg[01;31m[Ker-[m[K>getX(vname));
./src/lib_behaviors/IvPBehavior.cpp:1958:    return(m_ledg[01;31m[Ker-[m[K>getY(vname));
./src/lib_behaviors/IvPBehavior.cpp:1960:    return(m_ledg[01;31m[Ker-[m[K>getHeading(vname));
./src/lib_behaviors/IvPBehavior.cpp:1962:    return(m_ledg[01;31m[Ker-[m[K>getSpeed(vname));
./src/lib_behaviors/IvPBehavior.cpp:1964:    return(m_ledg[01;31m[Ker-[m[K>getDepth(vname));
./src/lib_behaviors/IvPBehavior.cpp:1966:    return(m_ledg[01;31m[Ker-[m[K>getLat(vname));
./src/lib_behaviors/IvPBehavior.cpp:1968:    return(m_ledg[01;31m[Ker-[m[K>getLon(vname));
./src/lib_behaviors/IvPBehavior.cpp:1970:    return(m_ledg[01;31m[Ker-[m[K>getUTC(vname));
./src/lib_behaviors/IvPBehavior.cpp:1972:    return(m_ledg[01;31m[Ker-[m[K>getUTCAge(vname));
./src/lib_behaviors/IvPBehavior.cpp:1974:    return(m_ledg[01;31m[Ker-[m[K>getUTCReceived(vname));
./src/lib_behaviors/IvPBehavior.cpp:1976:    return(m_ledg[01;31m[Ker-[m[K>getUTCAgeReceived(vname));
./src/lib_behaviors/IvPBehavior.cpp:2007:  if(!m_ledger || !m_ledg[01;31m[Ker-[m[K>hasVName(vname)) {
./src/lib_behaviors/IvPBehavior.cpp:2014:    return(m_ledg[01;31m[Ker-[m[K>getGroup(vname));
./src/lib_behaviors/IvPBehavior.cpp:2016:    return(m_ledg[01;31m[Ker-[m[K>getType(vname));
